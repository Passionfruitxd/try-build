{"version":3,"sources":["../node_modules/zustand/shallow.js","featureFlags/flags/payWithAnyToken.ts","nft/utils/tokenRoutes.ts","nft/hooks/useTokenInput.ts","nft/hooks/usePayWithAnyTokenSwap.ts","nft/hooks/usePriceImpact.ts","nft/components/bag/BagFooter.tsx","nft/hooks/useDerivedPayWithAnyTokenSwapInfo.ts","nft/hooks/usePermit2Approval.ts","nft/components/profile/list/Modal/BelowFloorWarningModal.tsx","nft/components/bag/profile/ListingModal.css.ts","nft/components/bag/profile/utils.ts","nft/components/bag/profile/ListingButton.tsx","nft/components/bag/profile/ListingSection.tsx","nft/components/bag/profile/ListingModal.tsx","nft/utils/nftRoute.ts","nft/components/collection/Card.tsx","nft/components/bag/TimedLoader.tsx","nft/components/bag/BagRow.css.ts","nft/components/bag/BagRow.tsx","nft/css/loading.css.ts","nft/components/bag/BagContent.tsx","nft/components/bag/BagHeader.tsx","nft/components/bag/EmptyContent.tsx","nft/components/bag/profile/ProfileAssetRow.tsx","nft/components/bag/profile/ProfileBagContent.tsx","nft/components/bag/Bag.tsx","featureFlags/flags/gqlRouting.ts","nft/components/bag/Bag.css.ts"],"names":["Object","defineProperty","exports","value","objA","objB","is","keysA","keys","length","i","prototype","hasOwnProperty","call","usePayWithAnyTokenEnabled","flagEnabled","useBaseFlag","FeatureFlag","payWithAnyToken","BaseVariant","Enabled","chainId","useWeb3React","UNIVERSAL_ROUTER_ADDRESS","buildTradeRouteInput","swap","inputAmount","amount","swapAmounts","outputAmount","quotient","toString","token","address","currency","isToken","decimals","isNative","pools","route","map","pool","isPool","pair","undefined","tokenAmountA","reserve0","token0","tokenAmountB","reserve1","token1","fee","liquidity","sqrtRatioX96","tickCurrent","tokenA","tokenB","buildPool","useTokenInput","create","devtools","set","inputCurrency","tokenTradeInput","setInputCurrency","clearInputCurrency","setTokenTradeInput","name","usePayWithAnyTokenSwap","trade","allowance","allowedSlippage","state","hasRoutes","routes","hasInputAmount","hasAllowance","useEffect","slippage","parseInt","multiply","toSignificant","mixedTokenTradeRouteInputs","v2TokenTradeRouteInputs","v3TokenTradeRouteInputs","swaps","protocol","Protocol","MIXED","push","V2","buildAllTradeRouteInputs","mixedRoutes","tradeType","TokenTradeType","ExactOutput","v2Routes","v3Routes","permitInput","permitSignature","details","expiration","nonce","sigDeadline","signature","spender","permit","slippageToleranceBasisPoints","tokenAmount","usePriceImpact","theme","useTheme","useMemo","marketPriceImpact","computeRealizedPriceImpact","priceImpactWarning","getPriceImpactWarning","warningColor","accentCritical","accentWarning","priceImpactSeverity","type","color","displayPercentage","priceImpact","sign","lessThan","Number","numerator","denominator","number","parseFloat","toFixed","toHumanReadablePercent","FooterContainer","styled","div","Footer","backgroundOutline","textPrimary","FooterHeader","Column","usingPayWithAnyToken","CurrencyRow","Row","TotalColumn","WarningIcon","AlertTriangle","WarningText","ThemedText","BodyPrimary","$color","HelperText","Caption","CurrencyInput","PayButton","button","$backgroundColor","FiatLoadingBubble","LoadingBubble","PriceImpactContainer","PriceImpactRow","ValueText","ActionButton","disabled","children","onClick","backgroundColor","textColor","Warning","fontSize","lineHeight","Helper","InputCurrencyValue","totalEthPrice","activeCurrency","tradeState","TradeState","LOADING","fontWeight","SYNCING","ethNumberStandardFormatter","toExact","formatWeiToDecimal","symbol","FiatValue","usdcValue","text","size","BodySmall","style","INVALID","NO_ROUTE_FOUND","PENDING_BAG_STATUSES","BagStatus","FETCHING_ROUTE","CONFIRMING_IN_WALLET","FETCHING_FINAL_ROUTE","PROCESSING_TRANSACTION","BagFooter","fetchAssets","eventProperties","toggleWalletModal","useToggleWalletModal","account","connector","connected","Boolean","shouldUsePayWithAnyToken","defaultCurrency","useCurrency","inputCurrencyBalance","useTokenBalance","useBag","isLocked","bagStatus","setBagExpanded","setBagStatus","shallow","bagIsLocked","useState","tokenSelectorOpen","setTokenSelectorOpen","isPending","includes","SupportedChainId","MAINNET","parsedOutputAmount","tryParseCurrencyAmount","formatEther","useBestTrade","TradeType","EXACT_OUTPUT","useAutoSlippageTolerance","maximumAmountIn","useDerivedPayWithAnyTokenSwapInfo","maximumAmount","enabled","usePermit2Allowance","isApprovalLoading","AllowanceState","REQUIRED","isAllowancePending","setIsAllowancePending","updateAllowance","useCallback","a","invariant","approveAndPermit","sendAnalyticsEvent","InterfaceEventName","APPROVE_TOKEN_TXN_SUBMITTED","chain_id","token_symbol","token_address","console","error","usePermit2Approval","fiatValueTradeInput","useStablecoinValue","fiatValueTradeOutput","balanceInEth","useWalletBalance","balance","sufficientBalance","parseEther","gte","ADDING_TO_BAG","handleClick","buttonText","warningText","warningTextColor","helperText","helperTextColor","textSecondary","buttonColor","accentAction","buttonTextColor","accentTextLightPrimary","switchChain","WARNING","VALID","backgroundInteractive","CONFIRM_QUOTE","bagExpanded","traceEventProperties","usd_value","using_erc20","log","gap","SubHeaderSmall","NFTEventName","NFT_BUY_TOKEN_SELECTOR_CLICKED","CurrencyLogo","HeadlineSmall","marginBottom","justify","events","BrowserEvent","NFT_BUY_BAG_PAY","element","InterfaceElementName","NFT_BUY_BAG_PAY_BUTTON","properties","shouldLogImpression","Loader","stroke","CurrencySearchModal","isOpen","onDismiss","onCurrencySelect","NFT_BUY_TOKEN_SELECTED","selectedCurrency","onlyShowCurrenciesWithBalance","ModalWrapper","Z_INDEX","modal","backgroundSurface","deepShadow","BREAKPOINTS","sm","CloseIconWrapper","CloseIcon","X","HazardIconWrap","ContinueButton","ButtonPrimary","EditListings","span","BelowFloorWarningModal","listingsBelowFloor","closeModal","startListing","Portal","width","height","textAlign","price","floorPrice","e","preventDefault","stopPropagation","Overlay","updateStatus","listing","newStatus","rows","setRows","callback","rowsCopy","index","findIndex","n","status","approveCollectionRow","collectionRow","signer","setCollectionStatusAndCallback","pauseAllRows","ListingStatus","SIGNING","marketplace","collectionAddress","addresses","addressesByNetwork","OPENSEA_CROSS_CHAIN_CONDUIT","LOOKSRARE_MARKETPLACE_CONTRACT","X2Y2_TRANSFER_CONTRACT","TRANSFER_MANAGER_ERC721","approveCollection","REJECTED","FAILED","signListingRow","provider","getLooksRareNonce","setLooksRareNonce","setListingStatusAndCallback","looksRareNonce","asset","signListing","res","verifyStatus","PAUSED","APPROVED","pauseRow","row","PENDING","DEFINED","resetRow","ListingButton","showWarningOverride","useSellAsset","addMarketplaceWarning","sellAssets","removeAllMarketplaceWarnings","showResolveIssues","toggleShowResolveIssues","issues","setIssues","useNFTList","listingStatus","setListingStatus","setListings","setCollectionsRequiringApproval","showWarning","setShowWarning","canContinue","setCanContinue","newCollectionsToApprove","newListings","forEach","marketplaces","newListing","images","smallImageUrl","icon","tokenId","find","some","asset_contract","newCollectionRow","image_url","isVerified","collectionIsVerified","getListings","noMarketplacesSelected","missingExpiration","expirationTime","isNaN","Date","now","invalidExpiration","overMaxExpiration","listingsMissingPrice","listingsAboveSellOrderFloor","invalidPrices","overrideFloorPrice","floor_sell_order_price","foundIssues","continueCheck","pluralize","disableListButton","warningMessage","warningWrappedClick","message","addWarningMessages","Box","position","as","border","cursor","className","styles","white","opacity","CONTINUE","ListingSection","sectionTitle","caption","title","openIndex","isSuccessScreen","setIsOpen","notAllApproved","removeAssetMarketplace","removeRow","getListingRowPrice","listingRow","allApproved","flexWrap","subhead","marginTop","marginRight","clsx","paddingTop","badge","image","borderRadius","zIndex","src","alt","marginLeft","textOverflow","overflow","whiteSpace","maxWidth","md","bodySmall","formatEthPrice","numberToWei","justifyContent","buttonTextSmall","ListingModal","collectionsRequiringApproval","listings","getSigner","setOpenIndex","allCollectionsApproved","setAllCollectionsApproved","toggleCart","toggleBag","looksRareNonceRef","useRef","isMobile","useIsMobile","trace","useTrace","InterfaceModalName","NFT_LISTING","subscribe","current","totalEthListingValue","total","reduce","maxListing","b","maxFee","LOOKS_RARE_CREATOR_BASIS_POINTS","basisPoints","Math","round","EPSILON","getTotalEthValue","ethPriceInUSD","setEthPriceInUSD","fetchPrice","then","startListingEventProperties","collection_addresses","token_ids","Array","from","Set","list_quantity","every","collection","resetAllRows","signListings","allCollectionsApprovedOrPaused","allListingsApprovedOrPaused","startListingFlow","NFT_SELL_START_LISTING","getAddress","signerAddress","looksRareNonceFetcher","allListingsSigned","paused","NFT_LISTING_COMPLETED","signatures_approved","filter","logListing","showSuccessScreen","paddingBottom","paddingLeft","paddingRight","headlineSmall","display","fill","themeVars","colors","overflowX","overflowY","maxHeight","subheadSmall","buildRoutingItem","routingItem","action","RoutingActions","Buy","toLowerCase","amountIn","assetIn","ETHPrice","baseAsset","basePrice","baseDecimals","amountOut","assetOut","id","contractAddress","priceInfo","tokenType","orderSource","buildRouteResponse","routeResponse","useErc20Token","valueToSend","sendAmount","data","calldata","to","toAddress","AssetMediaType","dash","keyframes","Circle","circle","TimedLoader","strokeWidth","strokeLinecap","transform","transformOrigin","r","cx","cy","BORDER_RADIUS","accentActionSoft","OpacityHoverState","SuspiciousIcon","accentFailure","backgroundBackdrop","isDisabled","Suspicious","placement","flexShrink","bagRow","bagRowImage","grayscaleImage","collectionName","RemoveButton","ThemeButton","ReviewButton","RemoveAssetOverlay","RemoveAssetButton","NoContentContainer","background","left","top","BagRow","usdPrice","removeAsset","showRemove","grayscale","loadedImage","setImageLoaded","noImageAvailable","setNoImageAvailable","cardHovered","setCardHovered","handleMouseEnter","handleMouseLeave","showRemoveButton","assetEthPrice","updatedPriceInfo","assetEthPriceFormatted","assetUSDPriceFormatted","handleRemoveClick","getAssetHref","textDecoration","onMouseEnter","onMouseLeave","onLoad","onError","visibility","susFlag","emphasis","ButtonEmphasis","medium","ButtonSize","alignItems","PriceChangeBagRow","markAssetAsReviewed","isPriceIncrease","BigNumber","gt","handleRemove","handleKeep","borderTopColor","small","high","UnavailableAssetsPreview","assets","gridTemplateColumns","borderStyle","borderWidth","borderColor","UnavailableAssetsHeaderRow","clearUnavailableAssets","didOpenUnavailableAssets","setDidOpenUnavailableAssets","useReducer","s","toggleOpen","timeLeft","setTimeLeft","intervalId","setInterval","clearInterval","moreThanOneUnavailable","isShowingAssets","slice","BagContent","uncheckedItemsInBag","itemsInBag","setItemsInBag","removeAssetsFromBag","recalculateBagUsingPooledAssets","fetchedPriceData","useQuery","unchangedAssets","item","BagItemStatus","ADDED_TO_BAG","REVIEWED","priceChangedAssets","REVIEWING_PRICE_CHANGE","unavailableAssets","UNAVAILABLE","availableItems","hasAssetsInReview","hasAssets","NFT_BUY_BAG_CHANGED","bag_quantity","formatAssetEventProperties","IN_REVIEW","CONFIRM_REVIEW","reverse","ClearButton","ButtonText","IconWrapper","CounterDot","sizing","Wrapper","BagHeader","numberOfAssets","closeBag","resetFlow","isProfilePage","numberOfCharacters","getCircleSizing","StyledColumn","EmptyState","useIsNftProfilePage","textTertiary","ProfileAssetRow","removeSellAsset","hovered","setHovered","handleHover","handleRemoveAsset","ProfileBagContent","BAG_WIDTH","XXXL_BAG_WIDTH","BagContainer","shallowShadow","raiseZIndex","modalOverTooltip","modalBackdrop","breakpoint","xxxl","DetailsPageBackground","ScrollingIndicator","show","marginX","borderBottomColor","transition","Bag","resetSellAssets","reset","useProfilePageState","setProfilePageState","profilePageState","setLocked","setTotalEthPrice","isDetailsPage","useIsNftDetailsPage","isNFTPage","useIsNftPage","usingGqlRouting","gqlRouting","GqlRoutingVariant","sendTransaction","useSendTransaction","transactionState","setTransactionState","setState","transactionStateRef","useTransactionResponse","setTransactionResponse","queryClient","useQueryClient","isModalOpen","setModalIsOpen","userCanScroll","setUserCanScroll","scrollProgress","setScrollProgress","add","purchaseAssets","routingData","purchasingWithErc20","purchaseResponse","TxStateType","Success","Failed","handleCloseBag","manualClose","useNftRouteLazyQuery","fetchGqlRoute","itemsToBuy","ethSellObject","buildSellObject","ethTotal","variables","senderAddress","nftTrades","buildNftTradeInputFromBagItems","tokenTrades","onCompleted","nftRoute","combineBuyItemsWithTxRoute","hasPriceAdjustment","updatedAssets","shouldRefetchCalldata","fetchedPriceChangedAssets","sort","sortUpdatedAssets","fetchedUnavailableAssets","isUnavailable","fetchedUnchangedAssets","hasReviewedAssets","hasUnavailableAssets","shouldReview","unavailableAsset","changedAsset","unchangedAsset","shouldLock","fetchQuery","fetchRoute","toSell","toBuy","routeData","Confirming","Denied","Invalid","New","hasAssetsToShow","isBuyingAssets","isSellingAssets","shouldRenderEmptyState","ProfilePageStateType","LISTING","ref","node","canScroll","scrollHeight","clientHeight","onScroll","event","scrollTop","currentTarget","containerHeight","paddingY","buttonTextMedium","commonButtonStyles","NFT_PROFILE_PAGE_START_SELL"],"mappings":"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","file":"static/js/5.a6d9a0ac.chunk.js","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction shallow(objA, objB) {\n  if (Object.is(objA, objB)) {\n    return true;\n  }\n\n  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {\n    return false;\n  }\n\n  var keysA = Object.keys(objA);\n\n  if (keysA.length !== Object.keys(objB).length) {\n    return false;\n  }\n\n  for (var i = 0; i < keysA.length; i++) {\n    if (!Object.prototype.hasOwnProperty.call(objB, keysA[i]) || !Object.is(objA[keysA[i]], objB[keysA[i]])) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexports[\"default\"] = shallow;\n","import { UNIVERSAL_ROUTER_ADDRESS } from '@uniswap/universal-router-sdk'\nimport { useWeb3React } from '@web3-react/core'\n\nimport { BaseVariant, FeatureFlag, useBaseFlag } from '../index'\n\nexport function usePayWithAnyTokenFlag(): BaseVariant {\n  return useBaseFlag(FeatureFlag.payWithAnyToken, BaseVariant.Enabled)\n}\n\nexport function usePayWithAnyTokenEnabled(): boolean {\n  const flagEnabled = usePayWithAnyTokenFlag() === BaseVariant.Enabled\n  const { chainId } = useWeb3React()\n  try {\n    // Detect if the Universal Router is not yet deployed to chainId.\n    // This is necessary so that we can fallback correctly on chains without a Universal Router deployment.\n    // It will be removed once Universal Router is deployed on all supported chains.\n    chainId && UNIVERSAL_ROUTER_ADDRESS(chainId)\n    return flagEnabled\n  } catch {\n    return false\n  }\n}\n\nexport { BaseVariant as PayWithAnyTokenVariant }\n","import { IRoute, Protocol } from '@uniswap/router-sdk'\nimport { Currency, CurrencyAmount, TradeType } from '@uniswap/sdk-core'\nimport { Pair } from '@uniswap/v2-sdk'\nimport { Pool } from '@uniswap/v3-sdk'\nimport { TokenAmountInput, TokenTradeRouteInput, TradePoolInput } from 'graphql/data/__generated__/types-and-hooks'\nimport { InterfaceTrade } from 'state/routing/types'\n\ninterface SwapAmounts {\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\ninterface TradeTokenInputAmounts {\n  inputAmount: TokenAmountInput\n  outputAmount: TokenAmountInput\n}\n\ninterface Swap {\n  route: IRoute<Currency, Currency, Pair | Pool>\n  inputAmount: CurrencyAmount<Currency>\n  outputAmount: CurrencyAmount<Currency>\n}\n\nfunction buildTradeRouteInputAmounts(swapAmounts: SwapAmounts): TradeTokenInputAmounts {\n  return {\n    inputAmount: {\n      amount: swapAmounts.inputAmount.quotient.toString(),\n      token: {\n        address: swapAmounts.inputAmount.currency.isToken\n          ? swapAmounts.inputAmount.currency.address\n          : '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',\n        chainId: swapAmounts.inputAmount.currency.chainId,\n        decimals: swapAmounts.inputAmount.currency.decimals,\n        isNative: swapAmounts.inputAmount.currency.isNative,\n      },\n    },\n    outputAmount: {\n      amount: swapAmounts.outputAmount.quotient.toString(),\n      token: {\n        address: swapAmounts.outputAmount.currency.isToken\n          ? swapAmounts.outputAmount.currency.address\n          : '0xeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee',\n        chainId: swapAmounts.outputAmount.currency.chainId,\n        decimals: swapAmounts.outputAmount.currency.decimals,\n        isNative: swapAmounts.outputAmount.currency.isNative,\n      },\n    },\n  }\n}\n\nfunction buildPool(pool: Pair | Pool): TradePoolInput {\n  const isPool = 'fee' in pool\n\n  return {\n    pair: !isPool\n      ? {\n          tokenAmountA: {\n            amount: pool.reserve0.quotient.toString(),\n            token: {\n              address: pool.token0.address,\n              chainId: pool.token0.chainId,\n              decimals: pool.token0.decimals,\n              isNative: pool.token0.isNative,\n            },\n          },\n          tokenAmountB: {\n            amount: pool.reserve1.quotient.toString(),\n            token: {\n              address: pool.token1.address,\n              chainId: pool.token1.chainId,\n              decimals: pool.token1.decimals,\n              isNative: pool.token1.isNative,\n            },\n          },\n        }\n      : undefined,\n    pool: isPool\n      ? {\n          fee: pool.fee,\n          liquidity: pool.liquidity.toString(),\n          sqrtRatioX96: pool.sqrtRatioX96.toString(),\n          tickCurrent: pool.tickCurrent.toString(),\n          tokenA: {\n            address: pool.token0.address,\n            chainId: pool.token0.chainId,\n            decimals: pool.token0.decimals,\n            isNative: pool.token0.isNative,\n          },\n          tokenB: {\n            address: pool.token1.address,\n            chainId: pool.token1.chainId,\n            decimals: pool.token1.decimals,\n            isNative: pool.token1.isNative,\n          },\n        }\n      : undefined,\n  }\n}\n\nfunction buildPools(pools: (Pair | Pool)[]): TradePoolInput[] {\n  return pools.map((pool) => buildPool(pool))\n}\n\nfunction buildTradeRouteInput(swap: Swap): TokenTradeRouteInput {\n  return {\n    ...buildTradeRouteInputAmounts({ inputAmount: swap.inputAmount, outputAmount: swap.outputAmount }),\n    pools: buildPools(swap.route.pools),\n  }\n}\n\nexport function buildAllTradeRouteInputs(trade: InterfaceTrade<Currency, Currency, TradeType>): {\n  mixedTokenTradeRouteInputs: TokenTradeRouteInput[] | undefined\n  v2TokenTradeRouteInputs: TokenTradeRouteInput[] | undefined\n  v3TokenTradeRouteInputs: TokenTradeRouteInput[] | undefined\n} {\n  const mixedTokenTradeRouteInputs: TokenTradeRouteInput[] = []\n  const v2TokenTradeRouteInputs: TokenTradeRouteInput[] = []\n  const v3TokenTradeRouteInputs: TokenTradeRouteInput[] = []\n\n  const swaps = trade.swaps\n\n  for (const swap of swaps) {\n    if (swap.route.protocol === Protocol.MIXED) {\n      mixedTokenTradeRouteInputs.push(buildTradeRouteInput(swap))\n    } else if (swap.route.protocol === Protocol.V2) {\n      v2TokenTradeRouteInputs.push(buildTradeRouteInput(swap))\n    } else {\n      v3TokenTradeRouteInputs.push(buildTradeRouteInput(swap))\n    }\n  }\n\n  return {\n    mixedTokenTradeRouteInputs: mixedTokenTradeRouteInputs.length > 0 ? mixedTokenTradeRouteInputs : undefined,\n    v2TokenTradeRouteInputs: v2TokenTradeRouteInputs.length > 0 ? v2TokenTradeRouteInputs : undefined,\n    v3TokenTradeRouteInputs: v3TokenTradeRouteInputs.length > 0 ? v3TokenTradeRouteInputs : undefined,\n  }\n}\n","import { Currency } from '@uniswap/sdk-core'\nimport { TokenTradeInput } from 'graphql/data/__generated__/types-and-hooks'\nimport create from 'zustand'\nimport { devtools } from 'zustand/middleware'\n\ninterface TokenInputState {\n  inputCurrency: Currency | undefined\n  setInputCurrency: (currency: Currency | undefined) => void\n  clearInputCurrency: () => void\n  tokenTradeInput: TokenTradeInput | undefined\n  setTokenTradeInput: (tokenTradeInput: TokenTradeInput | undefined) => void\n}\n\nexport const useTokenInput = create<TokenInputState>()(\n  devtools(\n    (set) => ({\n      inputCurrency: undefined,\n      tokenTradeInput: undefined,\n      setInputCurrency: (currency) => set(() => ({ inputCurrency: currency })),\n      clearInputCurrency: () => set(() => ({ inputCurrency: undefined })),\n      setTokenTradeInput: (tokenTradeInput) => set(() => ({ tokenTradeInput })),\n    }),\n    { name: 'useTokenInput' }\n  )\n)\n","import { Currency, Percent, TradeType } from '@uniswap/sdk-core'\nimport { PermitInput, TokenTradeRoutesInput, TokenTradeType } from 'graphql/data/__generated__/types-and-hooks'\nimport { Allowance } from 'hooks/usePermit2Allowance'\nimport { buildAllTradeRouteInputs } from 'nft/utils/tokenRoutes'\nimport { useEffect } from 'react'\nimport { InterfaceTrade } from 'state/routing/types'\n\nimport { useTokenInput } from './useTokenInput'\n\nexport default function usePayWithAnyTokenSwap(\n  trade?: InterfaceTrade<Currency, Currency, TradeType> | undefined,\n  allowance?: Allowance,\n  allowedSlippage?: Percent\n) {\n  const setTokenTradeInput = useTokenInput((state) => state.setTokenTradeInput)\n  const hasRoutes = !!trade && trade.routes\n  const hasInputAmount = !!trade && !!trade.inputAmount && trade.inputAmount.currency.isToken\n  const hasAllowance = !!allowedSlippage && !!allowance\n\n  useEffect(() => {\n    if (!hasRoutes || !hasInputAmount || !hasAllowance) {\n      setTokenTradeInput(undefined)\n      return\n    }\n\n    const slippage = parseInt(allowedSlippage.multiply(100).toSignificant(2))\n\n    const { mixedTokenTradeRouteInputs, v2TokenTradeRouteInputs, v3TokenTradeRouteInputs } =\n      buildAllTradeRouteInputs(trade)\n\n    const routes: TokenTradeRoutesInput = {\n      mixedRoutes: mixedTokenTradeRouteInputs,\n      tradeType: TokenTradeType.ExactOutput,\n      v2Routes: v2TokenTradeRouteInputs,\n      v3Routes: v3TokenTradeRouteInputs,\n    }\n\n    const permitInput: PermitInput | undefined =\n      'permitSignature' in allowance && allowance.permitSignature\n        ? {\n            details: {\n              amount: allowance.permitSignature.details.amount.toString(),\n              expiration: allowance.permitSignature.details.expiration.toString(),\n              nonce: allowance.permitSignature.details.nonce.toString(),\n              token: allowance.permitSignature.details.token,\n            },\n            sigDeadline: allowance.permitSignature.sigDeadline.toString(),\n            signature: allowance.permitSignature.signature,\n            spender: allowance.permitSignature.spender,\n          }\n        : undefined\n\n    setTokenTradeInput({\n      permit: permitInput,\n      routes,\n      slippageToleranceBasisPoints: slippage,\n      tokenAmount: {\n        amount: trade.inputAmount.quotient.toString(),\n        token: {\n          address: trade.inputAmount.currency.address,\n          chainId: trade.inputAmount.currency.chainId,\n          decimals: trade.inputAmount.currency.decimals,\n          isNative: trade.inputAmount.currency.isNative,\n        },\n      },\n    })\n  }, [allowance, allowedSlippage, hasAllowance, hasInputAmount, hasRoutes, setTokenTradeInput, trade])\n}\n","import { Currency, Percent, TradeType } from '@uniswap/sdk-core'\nimport { useMemo } from 'react'\nimport { InterfaceTrade } from 'state/routing/types'\nimport { useTheme } from 'styled-components/macro'\nimport { computeRealizedPriceImpact, getPriceImpactWarning } from 'utils/prices'\n\nexport interface PriceImpact {\n  priceImpactSeverity: PriceImpactSeverity\n  displayPercentage(): string\n}\n\ninterface PriceImpactSeverity {\n  type: 'warning' | 'error'\n  color: string\n}\n\nexport function usePriceImpact(trade?: InterfaceTrade<Currency, Currency, TradeType>): PriceImpact | undefined {\n  const theme = useTheme()\n\n  return useMemo(() => {\n    const marketPriceImpact = trade ? computeRealizedPriceImpact(trade) : undefined\n    const priceImpactWarning = marketPriceImpact ? getPriceImpactWarning(marketPriceImpact) : undefined\n    const warningColor =\n      priceImpactWarning === 'error'\n        ? theme.accentCritical\n        : priceImpactWarning === 'warning'\n        ? theme.accentWarning\n        : undefined\n\n    return marketPriceImpact && priceImpactWarning && warningColor\n      ? {\n          priceImpactSeverity: {\n            type: priceImpactWarning,\n            color: warningColor,\n          },\n          displayPercentage: () => toHumanReadablePercent(marketPriceImpact),\n        }\n      : undefined\n  }, [theme.accentCritical, theme.accentWarning, trade])\n}\n\nfunction toHumanReadablePercent(priceImpact: Percent): string {\n  const sign = priceImpact.lessThan(0) ? '+' : ''\n  const exactFloat = (Number(priceImpact.numerator) / Number(priceImpact.denominator)) * 100\n  if (exactFloat < 0.005) {\n    return '0.00%'\n  }\n  const number = parseFloat(priceImpact.multiply(-1)?.toFixed(2))\n  return `${sign}${number}%`\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther } from '@ethersproject/units'\nimport { parseEther } from '@ethersproject/units'\nimport { t } from '@lingui/macro'\nimport { sendAnalyticsEvent, TraceEvent } from '@uniswap/analytics'\nimport { BrowserEvent, InterfaceElementName, NFTEventName } from '@uniswap/analytics-events'\nimport { Currency, CurrencyAmount, Token, TradeType } from '@uniswap/sdk-core'\nimport { useWeb3React } from '@web3-react/core'\nimport Column from 'components/Column'\nimport Loader from 'components/Loader'\nimport CurrencyLogo from 'components/Logo/CurrencyLogo'\nimport Row from 'components/Row'\nimport CurrencySearchModal from 'components/SearchModal/CurrencySearchModal'\nimport { LoadingBubble } from 'components/Tokens/loading'\nimport { MouseoverTooltip } from 'components/Tooltip'\nimport { SupportedChainId } from 'constants/chains'\nimport { usePayWithAnyTokenEnabled } from 'featureFlags/flags/payWithAnyToken'\nimport { useCurrency } from 'hooks/Tokens'\nimport { AllowanceState } from 'hooks/usePermit2Allowance'\nimport { useStablecoinValue } from 'hooks/useStablecoinPrice'\nimport { useTokenBalance } from 'lib/hooks/useCurrencyBalance'\nimport tryParseCurrencyAmount from 'lib/utils/tryParseCurrencyAmount'\nimport { useBag } from 'nft/hooks/useBag'\nimport useDerivedPayWithAnyTokenSwapInfo from 'nft/hooks/useDerivedPayWithAnyTokenSwapInfo'\nimport usePayWithAnyTokenSwap from 'nft/hooks/usePayWithAnyTokenSwap'\nimport usePermit2Approval from 'nft/hooks/usePermit2Approval'\nimport { PriceImpact, usePriceImpact } from 'nft/hooks/usePriceImpact'\nimport { useTokenInput } from 'nft/hooks/useTokenInput'\nimport { useWalletBalance } from 'nft/hooks/useWalletBalance'\nimport { BagStatus } from 'nft/types'\nimport { ethNumberStandardFormatter, formatWeiToDecimal } from 'nft/utils'\nimport { PropsWithChildren, useEffect, useMemo, useState } from 'react'\nimport { AlertTriangle, ChevronDown } from 'react-feather'\nimport { useToggleWalletModal } from 'state/application/hooks'\nimport { InterfaceTrade, TradeState } from 'state/routing/types'\nimport styled, { useTheme } from 'styled-components/macro'\nimport { ThemedText } from 'theme'\nimport { switchChain } from 'utils/switchChain'\nimport shallow from 'zustand/shallow'\n\nconst FooterContainer = styled.div`\n  padding: 0px 12px;\n`\n\nconst Footer = styled.div`\n  border-top: 1px solid ${({ theme }) => theme.backgroundOutline};\n  color: ${({ theme }) => theme.textPrimary};\n  display: flex;\n  flex-direction: column;\n  margin: 0px 16px 8px;\n  padding: 12px 0px;\n  border-bottom-left-radius: 12px;\n  border-bottom-right-radius: 12px;\n`\n\nconst FooterHeader = styled(Column)<{ usingPayWithAnyToken?: boolean }>`\n  padding-top: 8px;\n  padding-bottom: ${({ usingPayWithAnyToken }) => (usingPayWithAnyToken ? '16px' : '20px')};\n`\n\nconst CurrencyRow = styled(Row)`\n  justify-content: space-between;\n  align-items: start;\n  gap: 8px;\n`\n\nconst TotalColumn = styled(Column)`\n  text-align: end;\n  overflow-x: hidden;\n`\n\nconst WarningIcon = styled(AlertTriangle)`\n  width: 14px;\n  margin-right: 4px;\n  color: inherit;\n`\nconst WarningText = styled(ThemedText.BodyPrimary)<{ $color: string }>`\n  align-items: center;\n  color: ${({ $color }) => $color};\n  display: flex;\n  justify-content: center;\n  margin-bottom: 10px !important;\n  text-align: center;\n`\n\nconst HelperText = styled(ThemedText.Caption)<{ $color: string }>`\n  color: ${({ $color }) => $color};\n  display: flex;\n  justify-content: center;\n  text-align: center;\n  margin-bottom: 10px !important;\n`\n\nconst CurrencyInput = styled(Row)`\n  gap: 8px;\n  cursor: pointer;\n`\n\nconst PayButton = styled.button<{ $backgroundColor: string; $color: string }>`\n  display: flex;\n  background: ${({ $backgroundColor }) => $backgroundColor};\n  color: ${({ $color }) => $color};\n  font-weight: 600;\n  line-height: 24px;\n  font-size: 16px;\n  gap: 16px;\n  justify-content: center;\n  border: none;\n  border-radius: 12px;\n  padding: 12px 0px;\n  cursor: pointer;\n  align-items: center;\n\n  &:disabled {\n    opacity: 0.6;\n    cursor: auto;\n  }\n`\nconst FiatLoadingBubble = styled(LoadingBubble)`\n  border-radius: 4px;\n  width: 4rem;\n  height: 20px;\n  align-self: end;\n`\nconst PriceImpactContainer = styled(Row)`\n  align-items: center;\n  gap: 8px;\n  width: 100%;\n  justify-content: flex-end;\n`\n\nconst PriceImpactRow = styled(Row)`\n  align-items: center;\n  gap: 8px;\n`\n\nconst ValueText = styled(ThemedText.BodyPrimary)`\n  line-height: 20px;\n  font-weight: 500;\n  overflow-x: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  scrollbar-width: none;\n\n  ::-webkit-scrollbar {\n    display: none;\n  }\n`\n\ninterface ActionButtonProps {\n  disabled?: boolean\n  onClick: () => void\n  backgroundColor: string\n  textColor: string\n}\n\nconst ActionButton = ({\n  disabled,\n  children,\n  onClick,\n  backgroundColor,\n  textColor,\n}: PropsWithChildren<ActionButtonProps>) => {\n  return (\n    <PayButton disabled={disabled} onClick={onClick} $backgroundColor={backgroundColor} $color={textColor}>\n      {children}\n    </PayButton>\n  )\n}\n\ninterface HelperTextProps {\n  color: string\n}\n\nconst Warning = ({ color, children }: PropsWithChildren<HelperTextProps>) => {\n  if (!children) {\n    return null\n  }\n  return (\n    <WarningText fontSize=\"14px\" lineHeight=\"20px\" $color={color}>\n      <WarningIcon />\n      {children}\n    </WarningText>\n  )\n}\n\nconst Helper = ({ children, color }: PropsWithChildren<HelperTextProps>) => {\n  if (!children) {\n    return null\n  }\n  return (\n    <HelperText lineHeight=\"16px\" $color={color}>\n      {children}\n    </HelperText>\n  )\n}\n\nconst InputCurrencyValue = ({\n  usingPayWithAnyToken,\n  totalEthPrice,\n  activeCurrency,\n  tradeState,\n  trade,\n}: {\n  usingPayWithAnyToken: boolean\n  totalEthPrice: BigNumber\n  activeCurrency: Currency | undefined | null\n  tradeState: TradeState\n  trade: InterfaceTrade<Currency, Currency, TradeType> | undefined\n}) => {\n  if (!usingPayWithAnyToken) {\n    return (\n      <ThemedText.BodyPrimary lineHeight=\"20px\" fontWeight=\"500\">\n        {formatWeiToDecimal(totalEthPrice.toString())}\n        &nbsp;{activeCurrency?.symbol ?? 'ETH'}\n      </ThemedText.BodyPrimary>\n    )\n  }\n\n  if (tradeState === TradeState.LOADING) {\n    return (\n      <ThemedText.BodyPrimary color=\"textTertiary\" lineHeight=\"20px\" fontWeight=\"500\">\n        <>Fetching price...</>\n      </ThemedText.BodyPrimary>\n    )\n  }\n\n  return (\n    <ValueText color={tradeState === TradeState.SYNCING ? 'textTertiary' : 'textPrimary'}>\n      {ethNumberStandardFormatter(trade?.inputAmount.toExact())}\n    </ValueText>\n  )\n}\n\nconst FiatValue = ({\n  usdcValue,\n  priceImpact,\n  tradeState,\n  usingPayWithAnyToken,\n}: {\n  usdcValue: CurrencyAmount<Token> | null\n  priceImpact: PriceImpact | undefined\n  tradeState: TradeState\n  usingPayWithAnyToken: boolean\n}) => {\n  if (!usdcValue) {\n    if (usingPayWithAnyToken && (tradeState === TradeState.INVALID || tradeState === TradeState.NO_ROUTE_FOUND)) {\n      return null\n    }\n\n    return <FiatLoadingBubble />\n  }\n\n  return (\n    <PriceImpactContainer>\n      {priceImpact && (\n        <>\n          <MouseoverTooltip text={t`The estimated difference between the USD values of input and output amounts.`}>\n            <PriceImpactRow>\n              <AlertTriangle color={priceImpact.priceImpactSeverity.color} size=\"16px\" />\n              <ThemedText.BodySmall style={{ color: priceImpact.priceImpactSeverity.color }} lineHeight=\"20px\">\n                (<>{priceImpact.displayPercentage()}</>)\n              </ThemedText.BodySmall>\n            </PriceImpactRow>\n          </MouseoverTooltip>\n        </>\n      )}\n      <ThemedText.BodySmall color=\"textTertiary\" lineHeight=\"20px\">\n        {`${ethNumberStandardFormatter(usdcValue?.toExact(), true)}`}\n      </ThemedText.BodySmall>\n    </PriceImpactContainer>\n  )\n}\n\ninterface BagFooterProps {\n  totalEthPrice: BigNumber\n  fetchAssets: () => void\n  eventProperties: Record<string, unknown>\n}\n\nconst PENDING_BAG_STATUSES = [\n  BagStatus.FETCHING_ROUTE,\n  BagStatus.CONFIRMING_IN_WALLET,\n  BagStatus.FETCHING_FINAL_ROUTE,\n  BagStatus.PROCESSING_TRANSACTION,\n]\n\nexport const BagFooter = ({ totalEthPrice, fetchAssets, eventProperties }: BagFooterProps) => {\n  const toggleWalletModal = useToggleWalletModal()\n  const theme = useTheme()\n  const { account, chainId, connector } = useWeb3React()\n  const connected = Boolean(account && chainId)\n  const shouldUsePayWithAnyToken = usePayWithAnyTokenEnabled()\n  const inputCurrency = useTokenInput((state) => state.inputCurrency)\n  const setInputCurrency = useTokenInput((state) => state.setInputCurrency)\n  const defaultCurrency = useCurrency('ETH')\n  const inputCurrencyBalance = useTokenBalance(\n    account ?? undefined,\n    !!inputCurrency && inputCurrency.isToken ? inputCurrency : undefined\n  )\n\n  const {\n    isLocked: bagIsLocked,\n    bagStatus,\n    setBagExpanded,\n    setBagStatus,\n  } = useBag(\n    ({ isLocked, bagStatus, setBagExpanded, setBagStatus }) => ({\n      isLocked,\n      bagStatus,\n      setBagExpanded,\n      setBagStatus,\n    }),\n    shallow\n  )\n\n  const [tokenSelectorOpen, setTokenSelectorOpen] = useState(false)\n\n  const isPending = PENDING_BAG_STATUSES.includes(bagStatus)\n  const activeCurrency = inputCurrency ?? defaultCurrency\n  const usingPayWithAnyToken = !!inputCurrency && shouldUsePayWithAnyToken && chainId === SupportedChainId.MAINNET\n\n  const parsedOutputAmount = useMemo(() => {\n    return tryParseCurrencyAmount(formatEther(totalEthPrice.toString()), defaultCurrency ?? undefined)\n  }, [defaultCurrency, totalEthPrice])\n  const {\n    state: tradeState,\n    trade,\n    maximumAmountIn,\n    allowedSlippage,\n  } = useDerivedPayWithAnyTokenSwapInfo(usingPayWithAnyToken ? inputCurrency : undefined, parsedOutputAmount)\n  const { allowance, isAllowancePending, isApprovalLoading, updateAllowance } = usePermit2Approval(\n    trade?.inputAmount.currency.isToken ? (trade?.inputAmount as CurrencyAmount<Token>) : undefined,\n    maximumAmountIn,\n    shouldUsePayWithAnyToken\n  )\n  usePayWithAnyTokenSwap(trade, allowance, allowedSlippage)\n  const priceImpact = usePriceImpact(trade)\n\n  const fiatValueTradeInput = useStablecoinValue(trade?.inputAmount)\n  const fiatValueTradeOutput = useStablecoinValue(parsedOutputAmount)\n  const usdcValue = usingPayWithAnyToken ? fiatValueTradeInput : fiatValueTradeOutput\n\n  const { balance: balanceInEth } = useWalletBalance()\n  const sufficientBalance = useMemo(() => {\n    if (!connected || chainId !== SupportedChainId.MAINNET) {\n      return undefined\n    }\n\n    if (inputCurrency) {\n      const inputAmount = trade?.inputAmount\n\n      if (!inputCurrencyBalance || !inputAmount) {\n        return undefined\n      }\n\n      return !inputCurrencyBalance.lessThan(inputAmount)\n    }\n\n    return parseEther(balanceInEth).gte(totalEthPrice)\n  }, [connected, chainId, inputCurrency, balanceInEth, totalEthPrice, trade?.inputAmount, inputCurrencyBalance])\n\n  useEffect(() => {\n    setBagStatus(BagStatus.ADDING_TO_BAG)\n  }, [inputCurrency, setBagStatus])\n\n  const {\n    buttonText,\n    buttonTextColor,\n    disabled,\n    warningText,\n    warningTextColor,\n    helperText,\n    helperTextColor,\n    handleClick,\n    buttonColor,\n  } = useMemo(() => {\n    let handleClick = fetchAssets\n    let buttonText = <>Something went wrong</>\n    let disabled = true\n    let warningText = undefined\n    let warningTextColor = theme.accentWarning\n    let helperText = undefined\n    let helperTextColor = theme.textSecondary\n    let buttonColor = theme.accentAction\n    let buttonTextColor = theme.accentTextLightPrimary\n\n    if (connected && chainId !== SupportedChainId.MAINNET) {\n      handleClick = () => switchChain(connector, SupportedChainId.MAINNET)\n      buttonText = <>Switch networks</>\n      disabled = false\n      warningText = <>Wrong network</>\n    } else if (sufficientBalance === false) {\n      buttonText = <>Pay</>\n      disabled = true\n      warningText = <>Insufficient funds</>\n    } else if (bagStatus === BagStatus.WARNING) {\n      warningText = <>Something went wrong. Please try again.</>\n    } else if (!connected) {\n      handleClick = () => {\n        toggleWalletModal()\n        setBagExpanded({ bagExpanded: false })\n      }\n      disabled = false\n      buttonText = <>Connect wallet</>\n    } else if (bagStatus === BagStatus.FETCHING_FINAL_ROUTE || bagStatus === BagStatus.CONFIRMING_IN_WALLET) {\n      disabled = true\n      buttonText = <>Proceed in wallet</>\n    } else if (bagStatus === BagStatus.PROCESSING_TRANSACTION) {\n      disabled = true\n      buttonText = <>Transaction pending</>\n    } else if (usingPayWithAnyToken && tradeState !== TradeState.VALID) {\n      disabled = true\n      buttonText = <>Fetching Route</>\n\n      if (tradeState === TradeState.INVALID) {\n        buttonText = <>Pay</>\n      }\n\n      if (tradeState === TradeState.NO_ROUTE_FOUND) {\n        buttonText = <>Insufficient liquidity</>\n        buttonColor = theme.backgroundInteractive\n        buttonTextColor = theme.textPrimary\n        helperText = <>Insufficient pool liquidity to complete transaction</>\n      }\n    } else if (allowance.state === AllowanceState.REQUIRED || allowance.state === AllowanceState.LOADING) {\n      handleClick = () => updateAllowance()\n      disabled = isAllowancePending || isApprovalLoading || allowance.state === AllowanceState.LOADING\n\n      if (allowance.state === AllowanceState.LOADING) {\n        buttonText = <>Loading Allowance</>\n      } else if (isAllowancePending) {\n        buttonText = <>Approve in your wallet</>\n      } else if (isApprovalLoading) {\n        buttonText = <>Approval pending</>\n      } else {\n        helperText = <>An approval is needed to use this token. </>\n        buttonText = <>Approve</>\n      }\n    } else if (bagStatus === BagStatus.CONFIRM_QUOTE) {\n      disabled = false\n      warningTextColor = theme.accentAction\n      warningText = <>Price updated</>\n      buttonText = <>Pay</>\n    } else if (priceImpact && priceImpact.priceImpactSeverity.type === 'error') {\n      disabled = false\n      buttonColor = priceImpact.priceImpactSeverity.color\n      helperText = <>Price impact warning</>\n      helperTextColor = priceImpact.priceImpactSeverity.color\n      buttonText = <>Pay Anyway</>\n    } else if (sufficientBalance === true) {\n      disabled = false\n      buttonText = <>Pay</>\n      helperText = usingPayWithAnyToken ? <>Refunds for unavailable items will be given in ETH</> : undefined\n    }\n\n    return {\n      buttonText,\n      buttonTextColor,\n      disabled,\n      warningText,\n      warningTextColor,\n      helperText,\n      helperTextColor,\n      handleClick,\n      buttonColor,\n    }\n  }, [\n    fetchAssets,\n    theme.accentWarning,\n    theme.textSecondary,\n    theme.accentAction,\n    theme.accentTextLightPrimary,\n    theme.backgroundInteractive,\n    theme.textPrimary,\n    connected,\n    chainId,\n    sufficientBalance,\n    bagStatus,\n    usingPayWithAnyToken,\n    tradeState,\n    allowance.state,\n    priceImpact,\n    connector,\n    toggleWalletModal,\n    setBagExpanded,\n    isAllowancePending,\n    isApprovalLoading,\n    updateAllowance,\n  ])\n\n  const traceEventProperties = {\n    usd_value: usdcValue?.toExact(),\n    using_erc20: !!inputCurrency,\n    ...eventProperties,\n  }\n\n  console.log(bagStatus)\n\n  return (\n    <FooterContainer>\n      <Footer>\n        {shouldUsePayWithAnyToken && (\n          <FooterHeader gap=\"xs\" usingPayWithAnyToken={shouldUsePayWithAnyToken}>\n            <CurrencyRow>\n              <Column gap=\"xs\">\n                <ThemedText.SubHeaderSmall>\n                  <>Pay with</>\n                </ThemedText.SubHeaderSmall>\n                <CurrencyInput\n                  onClick={() => {\n                    if (!bagIsLocked) {\n                      setTokenSelectorOpen(true)\n                      sendAnalyticsEvent(NFTEventName.NFT_BUY_TOKEN_SELECTOR_CLICKED)\n                    }\n                  }}\n                >\n                  <CurrencyLogo currency={activeCurrency} size=\"24px\" />\n                  <ThemedText.HeadlineSmall fontWeight={500} lineHeight=\"24px\">\n                    {activeCurrency?.symbol}\n                  </ThemedText.HeadlineSmall>\n                  <ChevronDown size={20} color={theme.textSecondary} />\n                </CurrencyInput>\n              </Column>\n              <TotalColumn gap=\"xs\">\n                <ThemedText.SubHeaderSmall marginBottom=\"4px\">\n                  <>Total</>\n                </ThemedText.SubHeaderSmall>\n                <InputCurrencyValue\n                  usingPayWithAnyToken={usingPayWithAnyToken}\n                  totalEthPrice={totalEthPrice}\n                  activeCurrency={activeCurrency}\n                  tradeState={tradeState}\n                  trade={trade}\n                />\n              </TotalColumn>\n            </CurrencyRow>\n            <FiatValue\n              usdcValue={usdcValue}\n              priceImpact={priceImpact}\n              tradeState={tradeState}\n              usingPayWithAnyToken={usingPayWithAnyToken}\n            />\n          </FooterHeader>\n        )}\n        {!shouldUsePayWithAnyToken && (\n          <FooterHeader gap=\"xs\">\n            <Row justify=\"space-between\">\n              <div>\n                <ThemedText.HeadlineSmall>Total</ThemedText.HeadlineSmall>\n              </div>\n              <div>\n                <ThemedText.HeadlineSmall>\n                  {formatWeiToDecimal(totalEthPrice.toString())}\n                  &nbsp;{activeCurrency?.symbol ?? 'ETH'}\n                </ThemedText.HeadlineSmall>\n              </div>\n            </Row>\n            <FiatValue\n              usdcValue={usdcValue}\n              priceImpact={priceImpact}\n              tradeState={tradeState}\n              usingPayWithAnyToken={usingPayWithAnyToken}\n            />\n          </FooterHeader>\n        )}\n        <TraceEvent\n          events={[BrowserEvent.onClick]}\n          name={NFTEventName.NFT_BUY_BAG_PAY}\n          element={InterfaceElementName.NFT_BUY_BAG_PAY_BUTTON}\n          properties={{ ...traceEventProperties }}\n          shouldLogImpression={connected && !disabled}\n        >\n          <Warning color={warningTextColor}>{warningText}</Warning>\n          <Helper color={helperTextColor}>{helperText}</Helper>\n          <ActionButton\n            onClick={handleClick}\n            disabled={disabled || isPending}\n            backgroundColor={buttonColor}\n            textColor={buttonTextColor}\n          >\n            {isPending && <Loader size=\"20px\" stroke=\"white\" />}\n            {buttonText}\n          </ActionButton>\n        </TraceEvent>\n      </Footer>\n      <CurrencySearchModal\n        isOpen={tokenSelectorOpen}\n        onDismiss={() => setTokenSelectorOpen(false)}\n        onCurrencySelect={(currency: Currency) => {\n          setInputCurrency(currency.isNative ? undefined : currency)\n          if (currency.isToken) {\n            sendAnalyticsEvent(NFTEventName.NFT_BUY_TOKEN_SELECTED, {\n              token_address: currency.address,\n              token_symbol: currency.symbol,\n            })\n          }\n        }}\n        selectedCurrency={activeCurrency ?? undefined}\n        onlyShowCurrenciesWithBalance={true}\n      />\n    </FooterContainer>\n  )\n}\n","import { Currency, CurrencyAmount, NativeCurrency, Percent, Token, TradeType } from '@uniswap/sdk-core'\nimport useAutoSlippageTolerance from 'hooks/useAutoSlippageTolerance'\nimport { useBestTrade } from 'hooks/useBestTrade'\nimport { useMemo } from 'react'\nimport { InterfaceTrade, TradeState } from 'state/routing/types'\n\nexport default function useDerivedPayWithAnyTokenSwapInfo(\n  inputCurrency?: Currency,\n  parsedOutputAmount?: CurrencyAmount<NativeCurrency | Token>\n): {\n  state: TradeState\n  trade: InterfaceTrade<Currency, Currency, TradeType> | undefined\n  maximumAmountIn: CurrencyAmount<Token> | undefined\n  allowedSlippage: Percent\n} {\n  const { state, trade } = useBestTrade(TradeType.EXACT_OUTPUT, parsedOutputAmount, inputCurrency ?? undefined)\n  const allowedSlippage = useAutoSlippageTolerance(trade)\n  const maximumAmountIn = useMemo(() => {\n    const maximumAmountIn = trade?.maximumAmountIn(allowedSlippage)\n    return maximumAmountIn?.currency.isToken ? (maximumAmountIn as CurrencyAmount<Token>) : undefined\n  }, [allowedSlippage, trade])\n\n  return useMemo(() => {\n    return {\n      state,\n      trade,\n      maximumAmountIn,\n      allowedSlippage,\n    }\n  }, [allowedSlippage, maximumAmountIn, state, trade])\n}\n","import { sendAnalyticsEvent } from '@uniswap/analytics'\nimport { InterfaceEventName } from '@uniswap/analytics-events'\nimport { CurrencyAmount, Token } from '@uniswap/sdk-core'\nimport { UNIVERSAL_ROUTER_ADDRESS } from '@uniswap/universal-router-sdk'\nimport { useWeb3React } from '@web3-react/core'\nimport usePermit2Allowance, { AllowanceState } from 'hooks/usePermit2Allowance'\nimport { useCallback, useMemo, useState } from 'react'\nimport invariant from 'tiny-invariant'\n\nexport default function usePermit2Approval(\n  amount?: CurrencyAmount<Token>,\n  maximumAmount?: CurrencyAmount<Token>,\n  enabled?: boolean\n) {\n  const { chainId } = useWeb3React()\n\n  const allowance = usePermit2Allowance(\n    enabled ? maximumAmount ?? (amount?.currency.isToken ? (amount as CurrencyAmount<Token>) : undefined) : undefined,\n    enabled && chainId ? UNIVERSAL_ROUTER_ADDRESS(chainId) : undefined\n  )\n  const isApprovalLoading = allowance.state === AllowanceState.REQUIRED && allowance.isApprovalLoading\n  const [isAllowancePending, setIsAllowancePending] = useState(false)\n  const updateAllowance = useCallback(async () => {\n    invariant(allowance.state === AllowanceState.REQUIRED)\n    setIsAllowancePending(true)\n    try {\n      await allowance.approveAndPermit()\n      sendAnalyticsEvent(InterfaceEventName.APPROVE_TOKEN_TXN_SUBMITTED, {\n        chain_id: chainId,\n        token_symbol: maximumAmount?.currency.symbol,\n        token_address: maximumAmount?.currency.address,\n      })\n    } catch (e) {\n      console.error(e)\n    } finally {\n      setIsAllowancePending(false)\n    }\n  }, [allowance, chainId, maximumAmount?.currency.address, maximumAmount?.currency.symbol])\n\n  return useMemo(() => {\n    return {\n      allowance,\n      isApprovalLoading,\n      isAllowancePending,\n      updateAllowance,\n    }\n  }, [allowance, isAllowancePending, isApprovalLoading, updateAllowance])\n}\n","import { Plural, t } from '@lingui/macro'\nimport { ButtonPrimary } from 'components/Button'\nimport Column from 'components/Column'\nimport { Portal } from 'nft/components/common/Portal'\nimport { Overlay } from 'nft/components/modals/Overlay'\nimport { Listing, WalletAsset } from 'nft/types'\nimport React from 'react'\nimport { AlertTriangle, X } from 'react-feather'\nimport styled, { useTheme } from 'styled-components/macro'\nimport { BREAKPOINTS, ThemedText } from 'theme'\nimport { Z_INDEX } from 'theme/zIndex'\n\nconst ModalWrapper = styled(Column)`\n  position: fixed;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  width: 420px;\n  z-index: ${Z_INDEX.modal};\n  background: ${({ theme }) => theme.backgroundSurface};\n  border-radius: 20px;\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  box-shadow: ${({ theme }) => theme.deepShadow};\n  padding: 20px 24px 24px;\n  display: flex;\n  flex-direction: column;\n  gap: 12px;\n\n  @media screen and (max-width: ${BREAKPOINTS.sm}px) {\n    width: 100%;\n  }\n`\nconst CloseIconWrapper = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: flex-end;\n`\nconst CloseIcon = styled(X)`\n  cursor: pointer;\n  &:hover {\n    opacity: 0.6;\n  }\n`\n\nconst HazardIconWrap = styled.div`\n  display: flex;\n  width: 100%;\n  justify-content: center;\n  align-items: center;\n  padding: 32px 120px;\n`\n\nconst ContinueButton = styled(ButtonPrimary)`\n  font-weight: 600;\n  font-size: 20px;\n  line-height: 24px;\n  margin-top: 12px;\n`\n\nconst EditListings = styled.span`\n  font-weight: 600;\n  font-size: 16px;\n  line-height: 20px;\n  color: ${({ theme }) => theme.accentAction};\n  text-align: center;\n  cursor: pointer;\n  padding: 12px 16px;\n\n  &:hover {\n    opacity: 0.6;\n  }\n`\n\nexport const BelowFloorWarningModal = ({\n  listingsBelowFloor,\n  closeModal,\n  startListing,\n}: {\n  listingsBelowFloor: [WalletAsset, Listing][]\n  closeModal: () => void\n  startListing: () => void\n}) => {\n  const theme = useTheme()\n  const clickContinue = (e: React.MouseEvent) => {\n    e.preventDefault()\n    e.stopPropagation()\n    startListing()\n    closeModal()\n  }\n  return (\n    <Portal>\n      <ModalWrapper>\n        <CloseIconWrapper>\n          <CloseIcon width={24} height={24} onClick={closeModal} />{' '}\n        </CloseIconWrapper>\n        <HazardIconWrap>\n          <AlertTriangle height={90} width={90} color={theme.accentCritical} />\n        </HazardIconWrap>\n        <ThemedText.HeadlineSmall lineHeight=\"28px\" textAlign=\"center\">\n          <>Low listing price</>\n        </ThemedText.HeadlineSmall>\n        <ThemedText.BodyPrimary textAlign=\"center\">\n          <Plural\n            value={listingsBelowFloor.length !== 1 ? 2 : 1}\n            _1={t`One NFT is listed ${(\n              (1 - (listingsBelowFloor[0][1].price ?? 0) / (listingsBelowFloor[0][0].floorPrice ?? 0)) *\n              100\n            ).toFixed(0)}% `}\n            other={t`${listingsBelowFloor.length} NFTs are listed significantly `}\n          />\n          &nbsp;\n          <>below the collection’s floor price. Are you sure you want to continue?</>\n        </ThemedText.BodyPrimary>\n        <ContinueButton onClick={clickContinue}>\n          <>Continue</>\n        </ContinueButton>\n        <EditListings onClick={closeModal}>\n          <>Edit listings</>\n        </EditListings>\n      </ModalWrapper>\n      <Overlay onClick={closeModal} />\n    </Portal>\n  )\n}\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/bag/profile/ListingModal.css.ts.vanilla.css!=!../../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/bag/profile/ListingModal.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xM2J4ZzQyIHsKICB0cmFuc2Zvcm06IHJvdGF0ZSgxODBkZWcpOwogIGN1cnNvcjogcG9pbnRlcjsKfQouXzEzYnhnNDggewogIGJveC1zaXppbmc6IGJvcmRlci1ib3g7CiAgbWFyZ2luLWxlZnQ6IC0ycHg7CiAgbWFyZ2luLXJpZ2h0OiA0cHg7Cn0KLl8xM2J4ZzRhIHsKICBib3gtc2hhZG93OiAwcHggNHB4IDE2cHggcmdiYSgxMCwgMTAsIDU5LCAwLjIpOwp9\\\"}!../../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var chevron = 'rgw6ez19q rgw6ez12w rgw6ez7p6 rgw6ezpw rgw6ezq8';\nexport var chevronDown = '_13bxg42';\nexport var sectionDivider = 'rgw6ez7ce rgw6ezwk rgw6ez16w rgw6ez7k6 rgw6ez7au rgw6ez50k';\nexport var button = 'rgw6ez2cw rgw6ez2d9 rgw6ez2ie rgw6ez2ir rgw6ez2nq rgw6ez2o9 rgw6ez278 rgw6ez27r rgw6ez45e rgw6ezd2 rgw6ezb2 rgw6ezb9 rgw6eze8 rgw6ezef rgw6ez43w rgw6ez3k rgw6ez46q rgw6ez4w rgw6ez7c2';\nexport var listingModalIcon = '_13bxg48 rgw6ez7ka rgw6ez7au rgw6ez50q';\nexport var warningTooltip = '_13bxg4a rgw6ez2nk rgw6ez2i2 rgw6ez272 rgw6ez2cw';\nexport var listingSectionBorder = 'rgw6ez2t2 rgw6ez7bu rgw6ez50k rgw6ez7au rgw6ez7ka';","import type { JsonRpcSigner, Web3Provider } from '@ethersproject/providers'\nimport { addressesByNetwork, SupportedChainId } from '@looksrare/sdk'\nimport { LOOKSRARE_MARKETPLACE_CONTRACT, X2Y2_TRANSFER_CONTRACT } from 'nft/queries'\nimport { OPENSEA_CROSS_CHAIN_CONDUIT } from 'nft/queries/openSea'\nimport { AssetRow, CollectionRow, ListingMarket, ListingRow, ListingStatus, WalletAsset } from 'nft/types'\nimport { approveCollection, LOOKS_RARE_CREATOR_BASIS_POINTS, signListing } from 'nft/utils/listNfts'\nimport { Dispatch } from 'react'\n\nconst updateStatus = ({\n  listing,\n  newStatus,\n  rows,\n  setRows,\n  callback,\n}: {\n  listing: AssetRow\n  newStatus: ListingStatus\n  rows: AssetRow[]\n  setRows: Dispatch<AssetRow[]>\n  callback?: () => Promise<void>\n}) => {\n  const rowsCopy = [...rows]\n  const index = rows.findIndex((n) => n === listing)\n  listing.status = newStatus\n  if (callback) listing.callback = callback\n  rowsCopy[index] = listing\n  setRows(rowsCopy)\n}\n\nexport async function approveCollectionRow(\n  collectionRow: CollectionRow,\n  signer: JsonRpcSigner,\n  setCollectionStatusAndCallback: (\n    collection: CollectionRow,\n    status: ListingStatus,\n    callback?: () => Promise<void>\n  ) => void,\n  pauseAllRows?: () => void\n) {\n  const callback = () => approveCollectionRow(collectionRow, signer, setCollectionStatusAndCallback, pauseAllRows)\n  setCollectionStatusAndCallback(collectionRow, ListingStatus.SIGNING, callback)\n  const { marketplace, collectionAddress } = collectionRow\n  const addresses = addressesByNetwork[SupportedChainId.MAINNET]\n  const spender =\n    marketplace.name === 'OpenSea'\n      ? OPENSEA_CROSS_CHAIN_CONDUIT\n      : marketplace.name === 'Rarible'\n      ? LOOKSRARE_MARKETPLACE_CONTRACT\n      : marketplace.name === 'X2Y2'\n      ? X2Y2_TRANSFER_CONTRACT\n      : addresses.TRANSFER_MANAGER_ERC721\n  !!collectionAddress &&\n    (await approveCollection(spender, collectionAddress, signer, (newStatus: ListingStatus) =>\n      setCollectionStatusAndCallback(collectionRow, newStatus, callback)\n    ))\n  if (\n    (collectionRow.status === ListingStatus.REJECTED || collectionRow.status === ListingStatus.FAILED) &&\n    pauseAllRows\n  )\n    pauseAllRows()\n}\n\nexport async function signListingRow(\n  listing: ListingRow,\n  signer: JsonRpcSigner,\n  provider: Web3Provider,\n  getLooksRareNonce: () => number,\n  setLooksRareNonce: (nonce: number) => void,\n  setListingStatusAndCallback: (listing: ListingRow, status: ListingStatus, callback?: () => Promise<void>) => void,\n  pauseAllRows?: () => void\n) {\n  const looksRareNonce = getLooksRareNonce()\n  const callback = () => {\n    return signListingRow(\n      listing,\n      signer,\n      provider,\n      getLooksRareNonce,\n      setLooksRareNonce,\n      setListingStatusAndCallback,\n      pauseAllRows\n    )\n  }\n  setListingStatusAndCallback(listing, ListingStatus.SIGNING, callback)\n  const { asset, marketplace } = listing\n  const res = await signListing(marketplace, asset, signer, provider, looksRareNonce, (newStatus: ListingStatus) =>\n    setListingStatusAndCallback(listing, newStatus, callback)\n  )\n  if (listing.status === ListingStatus.REJECTED && pauseAllRows) {\n    pauseAllRows()\n  } else {\n    res && listing.marketplace.name === 'LooksRare' && setLooksRareNonce(looksRareNonce + 1)\n  }\n}\n\nexport const getTotalEthValue = (sellAssets: WalletAsset[]) => {\n  const total = sellAssets.reduce((total, asset: WalletAsset) => {\n    if (asset.newListings?.length) {\n      const maxListing = asset.newListings.reduce((a, b) => ((a.price ?? 0) > (b.price ?? 0) ? a : b))\n      // LooksRare is a unique case where creator royalties are a flat 0.5% or 50 basis points\n      const maxFee =\n        maxListing.marketplace.fee +\n        (maxListing.marketplace.name === 'LooksRare' ? LOOKS_RARE_CREATOR_BASIS_POINTS : asset?.basisPoints ?? 0) / 100\n      return total + (maxListing.price ?? 0) - (maxListing.price ?? 0) * (maxFee / 100)\n    }\n    return total\n  }, 0)\n  return total ? Math.round(total * 10000 + Number.EPSILON) / 10000 : 0\n}\n\nexport const getListings = (sellAssets: WalletAsset[]): [CollectionRow[], ListingRow[]] => {\n  const newCollectionsToApprove: CollectionRow[] = []\n\n  const newListings: ListingRow[] = []\n  sellAssets.forEach((asset) => {\n    asset.marketplaces?.forEach((marketplace: ListingMarket) => {\n      const newListing = {\n        images: [asset.smallImageUrl, marketplace.icon],\n        name: asset.name || `#${asset.tokenId}`,\n        status: ListingStatus.DEFINED,\n        asset,\n        marketplace,\n        price: asset.newListings?.find((listing) => listing.marketplace.name === marketplace.name)?.price,\n      }\n      newListings.push(newListing)\n      if (\n        !newCollectionsToApprove.some(\n          (collectionRow: CollectionRow) =>\n            collectionRow.collectionAddress === asset.asset_contract.address &&\n            collectionRow.marketplace.name === marketplace.name\n        )\n      ) {\n        const newCollectionRow = {\n          images: [asset.asset_contract.image_url, marketplace.icon],\n          name: asset.asset_contract.name,\n          status: ListingStatus.DEFINED,\n          collectionAddress: asset.asset_contract.address,\n          isVerified: asset.collectionIsVerified,\n          marketplace,\n        }\n        newCollectionsToApprove.push(newCollectionRow)\n      }\n    })\n  })\n  return [newCollectionsToApprove, newListings]\n}\n\ntype ListingState = {\n  allListingsPending: boolean\n  allListingsDefined: boolean\n  allListingsApproved: boolean\n  allCollectionsPending: boolean\n  allCollectionsDefined: boolean\n  anyActiveSigning: boolean\n  anyActiveFailures: boolean\n  anyActiveRejections: boolean\n  anyPaused: boolean\n}\n\nexport const getListingState = (\n  collectionsRequiringApproval: CollectionRow[],\n  listings: ListingRow[]\n): ListingState => {\n  let allListingsPending = true\n  let allListingsDefined = true\n  let allListingsApproved = true\n  let allCollectionsPending = true\n  let allCollectionsDefined = true\n  let anyActiveSigning = false\n  let anyActiveFailures = false\n  let anyActiveRejections = false\n  let anyPaused = false\n\n  if (collectionsRequiringApproval.length === 0) {\n    allCollectionsDefined = allCollectionsPending = false\n  }\n  for (const collection of collectionsRequiringApproval) {\n    if (collection.status !== ListingStatus.PENDING) allCollectionsPending = false\n    if (collection.status !== ListingStatus.DEFINED) allCollectionsDefined = false\n    if (collection.status === ListingStatus.SIGNING) anyActiveSigning = true\n    else if (collection.status === ListingStatus.FAILED) anyActiveFailures = true\n    else if (collection.status === ListingStatus.REJECTED) anyActiveRejections = true\n    else if (collection.status === ListingStatus.PAUSED) anyPaused = true\n  }\n\n  if (listings.length === 0) {\n    allListingsApproved = allListingsDefined = allListingsPending = false\n  }\n  for (const listing of listings) {\n    if (listing.status !== ListingStatus.PENDING) allListingsPending = false\n    if (listing.status !== ListingStatus.DEFINED) allListingsDefined = false\n    if (listing.status !== ListingStatus.APPROVED) allListingsApproved = false\n    if (listing.status === ListingStatus.SIGNING) anyActiveSigning = true\n    else if (listing.status === ListingStatus.FAILED) anyActiveFailures = true\n    else if (listing.status === ListingStatus.REJECTED) anyActiveRejections = true\n    else if (listing.status === ListingStatus.PAUSED) anyPaused = true\n  }\n  return {\n    allListingsPending,\n    allListingsDefined,\n    allListingsApproved,\n    allCollectionsPending,\n    allCollectionsDefined,\n    anyActiveSigning,\n    anyActiveFailures,\n    anyActiveRejections,\n    anyPaused,\n  }\n}\n\nexport const verifyStatus = (status: ListingStatus) => {\n  return status !== ListingStatus.PAUSED && status !== ListingStatus.APPROVED\n}\n\nexport const pauseRow = (row: AssetRow, rows: AssetRow[], setRows: Dispatch<AssetRow[]>) => {\n  if (row.status === ListingStatus.PENDING || row.status === ListingStatus.DEFINED)\n    updateStatus({\n      listing: row,\n      newStatus: ListingStatus.PAUSED,\n      rows,\n      setRows,\n    })\n}\n\nexport const resetRow = (row: AssetRow, rows: AssetRow[], setRows: Dispatch<AssetRow[]>) => {\n  if (\n    row.status === ListingStatus.PAUSED ||\n    row.status === ListingStatus.FAILED ||\n    row.status === ListingStatus.REJECTED\n  )\n    updateStatus({\n      listing: row,\n      newStatus: ListingStatus.DEFINED,\n      rows,\n      setRows,\n    })\n}\n","import { Plural, t } from '@lingui/macro'\nimport ms from 'ms.macro'\nimport { Box } from 'nft/components/Box'\nimport { BelowFloorWarningModal } from 'nft/components/profile/list/Modal/BelowFloorWarningModal'\nimport { useNFTList, useSellAsset } from 'nft/hooks'\nimport { Listing, ListingStatus, WalletAsset } from 'nft/types'\nimport { pluralize } from 'nft/utils/roundAndPluralize'\nimport { useEffect, useMemo, useState } from 'react'\nimport { useTheme } from 'styled-components/macro'\nimport shallow from 'zustand/shallow'\n\nimport * as styles from './ListingModal.css'\nimport { getListings } from './utils'\n\nconst BELOW_FLOOR_PRICE_THRESHOLD = 0.8\n\ninterface ListingButtonProps {\n  onClick: () => void\n  buttonText: string\n  showWarningOverride?: boolean\n}\n\nexport const ListingButton = ({ onClick, buttonText, showWarningOverride = false }: ListingButtonProps) => {\n  const {\n    addMarketplaceWarning,\n    sellAssets,\n    removeAllMarketplaceWarnings,\n    showResolveIssues,\n    toggleShowResolveIssues,\n    issues,\n    setIssues,\n  } = useSellAsset(\n    ({\n      addMarketplaceWarning,\n      sellAssets,\n      removeAllMarketplaceWarnings,\n      showResolveIssues,\n      toggleShowResolveIssues,\n      issues,\n      setIssues,\n    }) => ({\n      addMarketplaceWarning,\n      sellAssets,\n      removeAllMarketplaceWarnings,\n      showResolveIssues,\n      toggleShowResolveIssues,\n      issues,\n      setIssues,\n    }),\n    shallow\n  )\n  const { listingStatus, setListingStatus, setListings, setCollectionsRequiringApproval } = useNFTList(\n    ({ listingStatus, setListingStatus, setListings, setCollectionsRequiringApproval }) => ({\n      listingStatus,\n      setListingStatus,\n      setListings,\n      setCollectionsRequiringApproval,\n    }),\n    shallow\n  )\n  const [showWarning, setShowWarning] = useState(false)\n  const [canContinue, setCanContinue] = useState(false)\n  const theme = useTheme()\n\n  useEffect(() => {\n    const [newCollectionsToApprove, newListings] = getListings(sellAssets)\n    setListings(newListings)\n    setCollectionsRequiringApproval(newCollectionsToApprove)\n    setListingStatus(ListingStatus.DEFINED)\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [sellAssets])\n\n  const [\n    noMarketplacesSelected,\n    missingExpiration,\n    invalidExpiration,\n    overMaxExpiration,\n    listingsMissingPrice,\n    listingsBelowFloor,\n    listingsAboveSellOrderFloor,\n    invalidPrices,\n  ] = useMemo(() => {\n    const noMarketplacesSelected = sellAssets.some((asset: WalletAsset) => asset.marketplaces === undefined)\n    const missingExpiration = sellAssets.some((asset) => {\n      return (\n        asset.expirationTime != null &&\n        (isNaN(asset.expirationTime) || asset.expirationTime * 1000 - Date.now() < ms`60 seconds`)\n      )\n    })\n    const invalidExpiration = sellAssets.some((asset) => {\n      return asset.expirationTime != null && isNaN(asset.expirationTime)\n    })\n    const overMaxExpiration = sellAssets.some((asset) => {\n      return asset.expirationTime != null && asset.expirationTime * 1000 - Date.now() > ms`180 days`\n    })\n\n    const listingsMissingPrice: [WalletAsset, Listing][] = []\n    const listingsBelowFloor: [WalletAsset, Listing][] = []\n    const listingsAboveSellOrderFloor: [WalletAsset, Listing][] = []\n    const invalidPrices: [WalletAsset, Listing][] = []\n    for (const asset of sellAssets) {\n      if (asset.newListings) {\n        for (const listing of asset.newListings) {\n          if (!listing.price) listingsMissingPrice.push([asset, listing])\n          else if (isNaN(listing.price) || listing.price < 0) invalidPrices.push([asset, listing])\n          else if (\n            listing.price < (asset?.floorPrice ?? 0) * BELOW_FLOOR_PRICE_THRESHOLD &&\n            !listing.overrideFloorPrice\n          )\n            listingsBelowFloor.push([asset, listing])\n          else if (asset.floor_sell_order_price && listing.price >= asset.floor_sell_order_price)\n            listingsAboveSellOrderFloor.push([asset, listing])\n        }\n      }\n    }\n    // set number of issues\n\n    const foundIssues =\n      Number(missingExpiration) +\n      Number(overMaxExpiration) +\n      listingsMissingPrice.length +\n      listingsAboveSellOrderFloor.length\n    setIssues(foundIssues)\n    !foundIssues && showResolveIssues && toggleShowResolveIssues()\n    // Only show Resolve Issue text if there was a user submitted error (ie not when page loads with no prices set)\n    if ((missingExpiration || overMaxExpiration || listingsAboveSellOrderFloor.length) && !showResolveIssues)\n      toggleShowResolveIssues()\n\n    const continueCheck = listingsBelowFloor.length === 0 && listingsAboveSellOrderFloor.length === 0\n    setCanContinue(continueCheck)\n    return [\n      noMarketplacesSelected,\n      missingExpiration,\n      invalidExpiration,\n      overMaxExpiration,\n      listingsMissingPrice,\n      listingsBelowFloor,\n      listingsAboveSellOrderFloor,\n      invalidPrices,\n    ]\n  }, [sellAssets, setIssues, showResolveIssues, toggleShowResolveIssues])\n\n  const [disableListButton, warningMessage] = useMemo(() => {\n    const disableListButton =\n      noMarketplacesSelected ||\n      missingExpiration ||\n      invalidExpiration ||\n      overMaxExpiration ||\n      invalidPrices.length > 0 ||\n      listingsMissingPrice.length > 0\n\n    const warningMessage = noMarketplacesSelected\n      ? 'No marketplaces selected'\n      : missingExpiration\n      ? 'Set duration'\n      : invalidExpiration\n      ? 'Invalid duration'\n      : overMaxExpiration\n      ? 'Max duration is 6 months'\n      : listingsMissingPrice.length > 0\n      ? `${listingsMissingPrice.length} item price${pluralize(listingsMissingPrice.length)} not set`\n      : invalidPrices.length > 0\n      ? `${invalidPrices.length} price${pluralize(invalidPrices.length)} are invalid`\n      : listingsBelowFloor.length > 0\n      ? `${listingsBelowFloor.length} item${pluralize(listingsBelowFloor.length)} listed below floor`\n      : listingsAboveSellOrderFloor.length > 0\n      ? `${listingsAboveSellOrderFloor.length} item${pluralize(listingsAboveSellOrderFloor.length)} already listed`\n      : ''\n    return [disableListButton, warningMessage]\n  }, [\n    noMarketplacesSelected,\n    missingExpiration,\n    invalidExpiration,\n    overMaxExpiration,\n    listingsMissingPrice,\n    invalidPrices,\n    listingsBelowFloor,\n    listingsAboveSellOrderFloor,\n  ])\n\n  useEffect(() => {\n    setShowWarning(false)\n  }, [warningMessage])\n\n  const addWarningMessages = () => {\n    removeAllMarketplaceWarnings()\n    if (!missingExpiration && !noMarketplacesSelected) {\n      if (listingsMissingPrice.length > 0) {\n        for (const [asset, listing] of listingsMissingPrice) {\n          addMarketplaceWarning(asset, {\n            message: 'PLEASE SET A PRICE',\n            marketplace: listing.marketplace,\n          })\n        }\n      } else if (invalidPrices.length > 0) {\n        for (const [asset, listing] of invalidPrices) {\n          !listing.overrideFloorPrice &&\n            addMarketplaceWarning(asset, {\n              message: `INVALID PRICE`,\n              marketplace: listing.marketplace,\n            })\n        }\n      }\n    }\n    setShowWarning(true)\n  }\n\n  const warningWrappedClick = () => {\n    if ((!disableListButton && canContinue) || showWarningOverride) {\n      if (issues) !showResolveIssues && toggleShowResolveIssues()\n      else if (listingsBelowFloor.length) setShowWarning(true)\n      else onClick()\n    } else addWarningMessages()\n  }\n\n  return (\n    <>\n      <Box position=\"relative\">\n        <Box\n          as=\"button\"\n          border=\"none\"\n          backgroundColor={showResolveIssues ? 'accentFailure' : 'accentAction'}\n          cursor={\n            [ListingStatus.APPROVED, ListingStatus.PENDING, ListingStatus.SIGNING].includes(listingStatus) ||\n            disableListButton\n              ? 'default'\n              : 'pointer'\n          }\n          className={styles.button}\n          onClick={() => listingStatus !== ListingStatus.APPROVED && warningWrappedClick()}\n          type=\"button\"\n          style={{\n            color: showResolveIssues ? theme.accentTextLightPrimary : theme.white,\n            opacity:\n              ![ListingStatus.DEFINED, ListingStatus.FAILED, ListingStatus.CONTINUE].includes(listingStatus) ||\n              (disableListButton && !showResolveIssues)\n                ? 0.3\n                : 1,\n          }}\n        >\n          {listingStatus === ListingStatus.SIGNING ? (\n            <>Proceed in wallet</>\n          ) : listingStatus === ListingStatus.PENDING ? (\n            <>Pending</>\n          ) : listingStatus === ListingStatus.APPROVED ? (\n            <>Complete!</>\n          ) : listingStatus === ListingStatus.PAUSED ? (\n            <>Paused</>\n          ) : listingStatus === ListingStatus.FAILED ? (\n            <>Try again</>\n          ) : listingStatus === ListingStatus.CONTINUE ? (\n            <>Continue</>\n          ) : showResolveIssues ? (\n            <Plural value={issues !== 1 ? 2 : 1} _1=\"Resolve issue\" other={t`Resolve ${issues} issues`} />\n          ) : (\n            buttonText\n          )}\n        </Box>\n      </Box>\n      {showWarning && (\n        <BelowFloorWarningModal\n          listingsBelowFloor={listingsBelowFloor}\n          closeModal={() => setShowWarning(false)}\n          startListing={onClick}\n        />\n      )}\n    </>\n  )\n}\n","import clsx from 'clsx'\nimport { Box } from 'nft/components/Box'\nimport { Column, Row } from 'nft/components/Flex'\nimport { ApprovedCheckmarkIcon, ChevronUpIcon, FailedListingIcon, LoadingIcon } from 'nft/components/icons'\nimport { badge, bodySmall, buttonTextSmall, subhead } from 'nft/css/common.css'\nimport { useSellAsset } from 'nft/hooks'\nimport { AssetRow, CollectionRow, ListingRow, ListingStatus } from 'nft/types'\nimport { formatEthPrice, numberToWei } from 'nft/utils/currency'\nimport { useEffect, useState } from 'react'\n\nimport * as styles from './ListingModal.css'\n\nexport const ListingSection = ({\n  sectionTitle,\n  caption = undefined,\n  title = undefined,\n  rows,\n  index,\n  openIndex,\n  isSuccessScreen = false,\n}: {\n  sectionTitle: string\n  caption?: string\n  title?: string\n  rows: AssetRow[]\n  index: number\n  openIndex: number\n  isSuccessScreen?: boolean\n}) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const notAllApproved = rows.some((row: AssetRow) => row.status !== ListingStatus.APPROVED)\n  const sellAssets = useSellAsset((state) => state.sellAssets)\n  const removeAssetMarketplace = useSellAsset((state) => state.removeAssetMarketplace)\n\n  const removeRow = (row: any) => {\n    // collections\n    if (index === 1) {\n      for (const asset of sellAssets)\n        if (asset.asset_contract.address === row.collectionAddress) removeAssetMarketplace(asset, row.marketplace)\n    }\n    // listings\n    else removeAssetMarketplace(row.asset, row.marketplace)\n  }\n\n  useEffect(() => {\n    setIsOpen(index === openIndex)\n  }, [index, openIndex])\n\n  function getListingRowPrice(row: AssetRow): number | undefined {\n    const listingRow = row as ListingRow\n    const newListings = listingRow.asset.newListings\n    return newListings?.find((listing) => listing.marketplace.name === listingRow.marketplace.name)?.price ?? 0\n  }\n\n  const allApproved = !notAllApproved && rows.length > 0 && !isSuccessScreen\n\n  return (\n    <Row\n      flexWrap=\"wrap\"\n      className={subhead}\n      marginTop=\"10\"\n      marginBottom=\"10\"\n      onClick={() => rows.length > 0 && setIsOpen(!isOpen)}\n      color={allApproved ? 'accentSuccess' : 'textPrimary'}\n    >\n      {allApproved && <ApprovedCheckmarkIcon style={{ marginRight: '8px' }} />}\n      {sectionTitle}\n      {!isSuccessScreen && <ChevronUpIcon className={clsx(`${isOpen ? '' : styles.chevronDown} ${styles.chevron}`)} />}\n      {(isOpen || isSuccessScreen) && (\n        <Column\n          gap=\"12\"\n          width=\"full\"\n          paddingTop={isSuccessScreen ? '28' : 'auto'}\n          className={clsx(!isSuccessScreen && styles.listingSectionBorder)}\n        >\n          {caption && (\n            <Box color=\"textPrimary\" fontWeight=\"normal\" className={caption}>\n              {caption}\n            </Box>\n          )}\n          {title && (\n            <Box color=\"textSecondary\" className={badge}>\n              {title}\n            </Box>\n          )}\n          <Column gap=\"8\">\n            {rows.map((row: AssetRow, index) => {\n              return (\n                <Column key={index} gap=\"8\">\n                  <Row>\n                    {row.images?.map((image, index) => {\n                      return (\n                        <Box\n                          as=\"img\"\n                          height=\"20\"\n                          width=\"20\"\n                          borderRadius={index === 0 && (row as CollectionRow).collectionAddress ? 'round' : '4'}\n                          style={{ zIndex: 2 - index }}\n                          className={styles.listingModalIcon}\n                          src={image}\n                          alt={row.name}\n                          key={index}\n                        />\n                      )\n                    })}\n                    <Box\n                      marginLeft=\"8\"\n                      marginRight=\"auto\"\n                      fontWeight=\"normal\"\n                      color=\"textPrimary\"\n                      textOverflow=\"ellipsis\"\n                      overflow=\"hidden\"\n                      whiteSpace=\"nowrap\"\n                      maxWidth={{\n                        sm: 'max',\n                        md:\n                          row.status === ListingStatus.REJECTED || row.status === ListingStatus.FAILED ? '120' : 'full',\n                      }}\n                      className={bodySmall}\n                    >\n                      {row.name}\n                    </Box>\n                    {isSuccessScreen ? (\n                      getListingRowPrice(row) &&\n                      `${formatEthPrice(numberToWei(getListingRowPrice(row) ?? 0).toString())} ETH`\n                    ) : row.status === ListingStatus.APPROVED ? (\n                      <ApprovedCheckmarkIcon height=\"20\" width=\"20\" />\n                    ) : row.status === ListingStatus.FAILED || row.status === ListingStatus.REJECTED ? (\n                      <Row gap=\"4\">\n                        <Box fontWeight=\"normal\" fontSize=\"14\" color=\"textSecondary\">\n                          {row.status}\n                        </Box>\n                        <FailedListingIcon />\n                      </Row>\n                    ) : (\n                      row.status === ListingStatus.SIGNING && <LoadingIcon height=\"20\" width=\"20\" stroke=\"#4673FA\" />\n                    )}\n                  </Row>\n                  {(row.status === ListingStatus.FAILED || row.status === ListingStatus.REJECTED) && (\n                    <Row gap=\"8\" justifyContent=\"center\">\n                      <Box\n                        width=\"120\"\n                        as=\"button\"\n                        className={buttonTextSmall}\n                        borderRadius=\"12\"\n                        border=\"none\"\n                        color=\"red400\"\n                        height=\"32\"\n                        cursor=\"pointer\"\n                        style={{ backgroundColor: '#FA2B391A' }}\n                        onClick={async (e) => {\n                          e.stopPropagation()\n                          removeRow(row)\n                        }}\n                      >\n                        Remove\n                      </Box>\n                      <Box\n                        width=\"120\"\n                        as=\"button\"\n                        className={buttonTextSmall}\n                        borderRadius=\"12\"\n                        border=\"none\"\n                        color=\"accentAction\"\n                        height=\"32\"\n                        cursor=\"pointer\"\n                        style={{ backgroundColor: '#4C82FB29' }}\n                        onClick={async (e) => {\n                          e.stopPropagation()\n                          if (row.callback) {\n                            await row.callback()\n                          }\n                        }}\n                      >\n                        Try again\n                      </Box>\n                    </Row>\n                  )}\n                </Column>\n              )\n            })}\n          </Column>\n        </Column>\n      )}\n    </Row>\n  )\n}\n","import { sendAnalyticsEvent, Trace, useTrace } from '@uniswap/analytics'\nimport { InterfaceModalName, NFTEventName } from '@uniswap/analytics-events'\nimport { useWeb3React } from '@web3-react/core'\nimport { Box } from 'nft/components/Box'\nimport { Column, Row } from 'nft/components/Flex'\nimport { ChevronLeftIcon, XMarkIcon } from 'nft/components/icons'\nimport { caption, headlineSmall, subhead, subheadSmall } from 'nft/css/common.css'\nimport { themeVars } from 'nft/css/sprinkles.css'\nimport { useBag, useIsMobile, useNFTList, useSellAsset } from 'nft/hooks'\nimport { logListing, looksRareNonceFetcher } from 'nft/queries'\nimport { AssetRow, CollectionRow, ListingRow, ListingStatus } from 'nft/types'\nimport { fetchPrice } from 'nft/utils/fetchPrice'\nimport { pluralize } from 'nft/utils/roundAndPluralize'\nimport { Dispatch, useEffect, useMemo, useRef, useState } from 'react'\nimport shallow from 'zustand/shallow'\n\nimport { ListingButton } from './ListingButton'\nimport * as styles from './ListingModal.css'\nimport { ListingSection } from './ListingSection'\nimport { approveCollectionRow, getTotalEthValue, pauseRow, resetRow, signListingRow, verifyStatus } from './utils'\n\nconst ListingModal = () => {\n  const { provider } = useWeb3React()\n  const sellAssets = useSellAsset((state) => state.sellAssets)\n  const {\n    listingStatus,\n    setListingStatus,\n    setListings,\n    setCollectionsRequiringApproval,\n    setListingStatusAndCallback,\n    setCollectionStatusAndCallback,\n    looksRareNonce,\n    setLooksRareNonce,\n    getLooksRareNonce,\n    collectionsRequiringApproval,\n    listings,\n  } = useNFTList(\n    ({\n      listingStatus,\n      setListingStatus,\n      setListings,\n      setCollectionsRequiringApproval,\n      setListingStatusAndCallback,\n      setCollectionStatusAndCallback,\n      looksRareNonce,\n      setLooksRareNonce,\n      getLooksRareNonce,\n      collectionsRequiringApproval,\n      listings,\n    }) => ({\n      listingStatus,\n      setListingStatus,\n      setListings,\n      setCollectionsRequiringApproval,\n      setListingStatusAndCallback,\n      setCollectionStatusAndCallback,\n      looksRareNonce,\n      setLooksRareNonce,\n      getLooksRareNonce,\n      collectionsRequiringApproval,\n      listings,\n    }),\n    shallow\n  )\n  const signer = provider?.getSigner()\n  const [openIndex, setOpenIndex] = useState(0)\n  const [allCollectionsApproved, setAllCollectionsApproved] = useState(false)\n  const toggleCart = useBag((state) => state.toggleBag)\n  const looksRareNonceRef = useRef(looksRareNonce)\n  const isMobile = useIsMobile()\n  const trace = useTrace({ modal: InterfaceModalName.NFT_LISTING })\n\n  useEffect(() => {\n    useNFTList.subscribe((state) => (looksRareNonceRef.current = state.looksRareNonce))\n  }, [])\n\n  const totalEthListingValue = useMemo(() => getTotalEthValue(sellAssets), [sellAssets])\n\n  const [ethPriceInUSD, setEthPriceInUSD] = useState(0)\n\n  useEffect(() => {\n    fetchPrice().then((price) => {\n      setEthPriceInUSD(price || 0)\n    })\n  }, [])\n\n  const startListingEventProperties = {\n    collection_addresses: sellAssets.map((asset) => asset.asset_contract.address),\n    token_ids: sellAssets.map((asset) => asset.tokenId),\n    marketplaces: Array.from(new Set(listings.map((asset) => asset.marketplace.name))),\n    list_quantity: listings.length,\n    usd_value: ethPriceInUSD * totalEthListingValue,\n    ...trace,\n  }\n\n  // when all collections have been approved, auto start the signing process\n  useEffect(() => {\n    collectionsRequiringApproval?.length &&\n      setAllCollectionsApproved(\n        collectionsRequiringApproval.every((collection: CollectionRow) => collection.status === ListingStatus.APPROVED)\n      )\n    if (\n      allCollectionsApproved &&\n      (listingStatus === ListingStatus.PENDING ||\n        listingStatus === ListingStatus.CONTINUE ||\n        listingStatus === ListingStatus.SIGNING)\n    ) {\n      resetAllRows()\n      signListings()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [collectionsRequiringApproval, allCollectionsApproved])\n\n  const allCollectionsApprovedOrPaused = useMemo(\n    () =>\n      collectionsRequiringApproval.every(\n        (collection: CollectionRow) =>\n          collection.status === ListingStatus.APPROVED || collection.status === ListingStatus.PAUSED\n      ),\n    [collectionsRequiringApproval]\n  )\n  const allListingsApprovedOrPaused = useMemo(\n    () =>\n      listings.every(\n        (listing: ListingRow) => listing.status === ListingStatus.APPROVED || listing.status === ListingStatus.PAUSED\n      ),\n    [listings]\n  )\n\n  // go back to a ready state after a successful retry\n  useEffect(() => {\n    if (listingStatus === ListingStatus.SIGNING && allCollectionsApprovedOrPaused && allListingsApprovedOrPaused) {\n      resetAllRows()\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [allCollectionsApprovedOrPaused, allListingsApprovedOrPaused])\n\n  // handles the modal wide listing state based on conglomeration of the wallet, collection, and listing states\n  const startListingFlow = async () => {\n    if (!signer) return\n    sendAnalyticsEvent(NFTEventName.NFT_SELL_START_LISTING, { ...startListingEventProperties })\n    setListingStatus(ListingStatus.SIGNING)\n    const signerAddress = await signer.getAddress()\n    const nonce = await looksRareNonceFetcher(signerAddress)\n    setLooksRareNonce(nonce ?? 0)\n\n    if (!collectionsRequiringApproval?.some((collection) => collection.status === ListingStatus.PAUSED)) {\n      setListingStatus(ListingStatus.SIGNING)\n      setOpenIndex(1)\n    }\n    // for all unique collection, marketplace combos -> approve collections\n    for (const collectionRow of collectionsRequiringApproval) {\n      verifyStatus(collectionRow.status) &&\n        (isMobile\n          ? await approveCollectionRow(collectionRow, signer, setCollectionStatusAndCallback, pauseAllRows)\n          : approveCollectionRow(collectionRow, signer, setCollectionStatusAndCallback, pauseAllRows))\n    }\n  }\n\n  const signListings = async () => {\n    if (!signer || !provider) return\n    setListingStatus(ListingStatus.SIGNING)\n    setOpenIndex(2)\n    // sign listings\n    for (const listing of listings) {\n      verifyStatus(listing.status) &&\n        (await signListingRow(\n          listing,\n          signer,\n          provider,\n          getLooksRareNonce,\n          setLooksRareNonce,\n          setListingStatusAndCallback,\n          pauseAllRows\n        ))\n    }\n    const allListingsSigned = listings.every((listing: ListingRow) => listing.status === ListingStatus.APPROVED)\n    const paused = listings.some((listing: ListingRow) => listing.status === ListingStatus.PAUSED)\n    if (allListingsSigned) {\n      setOpenIndex(0)\n      setListingStatus(ListingStatus.APPROVED)\n    } else if (!paused) {\n      setListingStatus(ListingStatus.FAILED)\n    }\n    sendAnalyticsEvent(NFTEventName.NFT_LISTING_COMPLETED, {\n      signatures_approved: listings.filter((asset) => asset.status === ListingStatus.APPROVED),\n      list_quantity: listings.length,\n      usd_value: ethPriceInUSD * totalEthListingValue,\n      ...trace,\n    })\n    await logListing(listings, (await signer?.getAddress()) ?? '')\n  }\n\n  const pauseAllRows = () => {\n    for (const collection of collectionsRequiringApproval) {\n      pauseRow(collection, collectionsRequiringApproval, setCollectionsRequiringApproval as Dispatch<AssetRow[]>)\n    }\n    for (const listing of listings) {\n      pauseRow(listing, listings, setListings as Dispatch<AssetRow[]>)\n    }\n  }\n\n  const resetAllRows = () => {\n    for (const collection of collectionsRequiringApproval) {\n      resetRow(collection, collectionsRequiringApproval, setCollectionsRequiringApproval as Dispatch<AssetRow[]>)\n    }\n    for (const listing of listings) {\n      resetRow(listing, listings, setListings as Dispatch<AssetRow[]>)\n    }\n  }\n\n  const clickStopListing = () => {\n    pauseAllRows()\n  }\n\n  const clickStartListingFlow = () => {\n    resetAllRows()\n    allCollectionsApproved ? signListings() : startListingFlow()\n  }\n\n  const showSuccessScreen = useMemo(() => listingStatus === ListingStatus.APPROVED, [listingStatus])\n\n  return (\n    <Trace modal={InterfaceModalName.NFT_LISTING}>\n      <Column paddingTop=\"20\" paddingBottom=\"20\" paddingLeft=\"12\" paddingRight=\"12\">\n        <Row className={headlineSmall} marginBottom=\"10\">\n          {isMobile && !showSuccessScreen && (\n            <Box paddingTop=\"4\" marginRight=\"4\" onClick={toggleCart}>\n              <ChevronLeftIcon height={28} width={28} />\n            </Box>\n          )}\n          {showSuccessScreen ? 'Success!' : `Listing ${sellAssets.length} NFTs`}\n          <Box\n            as=\"button\"\n            border=\"none\"\n            color=\"textSecondary\"\n            backgroundColor=\"backgroundSurface\"\n            marginLeft=\"auto\"\n            marginRight=\"0\"\n            paddingRight=\"0\"\n            display={{ sm: 'flex', md: 'none' }}\n            cursor=\"pointer\"\n            onClick={toggleCart}\n          >\n            <XMarkIcon height={28} width={28} fill={themeVars.colors.textPrimary} />\n          </Box>\n        </Row>\n        <Column overflowX=\"hidden\" overflowY=\"auto\" style={{ maxHeight: '60vh' }}>\n          {showSuccessScreen ? (\n            <Trace\n              name={NFTEventName.NFT_LISTING_COMPLETED}\n              properties={{ list_quantity: listings.length, usd_value: ethPriceInUSD * totalEthListingValue, ...trace }}\n              shouldLogImpression\n            >\n              <ListingSection\n                sectionTitle={`Listed ${listings.length} item${pluralize(listings.length)} for sale`}\n                rows={listings}\n                index={0}\n                openIndex={openIndex}\n                isSuccessScreen={true}\n              />\n            </Trace>\n          ) : (\n            <>\n              <ListingSection\n                sectionTitle={`Approve ${collectionsRequiringApproval.length} collection${pluralize(\n                  collectionsRequiringApproval.length\n                )}`}\n                title=\"COLLECTIONS\"\n                rows={collectionsRequiringApproval}\n                index={1}\n                openIndex={openIndex}\n              />\n              <ListingSection\n                sectionTitle={`Confirm ${listings.length} listing${pluralize(listings.length)}`}\n                caption=\"Now you can sign to list each item\"\n                title=\"NFTS\"\n                rows={listings}\n                index={2}\n                openIndex={openIndex}\n              />\n            </>\n          )}\n        </Column>\n        <hr className={styles.sectionDivider} />\n        <Row className={subhead} marginTop=\"12\" marginBottom={showSuccessScreen ? '8' : '20'}>\n          Return if sold\n          <Row className={subheadSmall} marginLeft=\"auto\" marginRight=\"0\">\n            {totalEthListingValue}\n            &nbsp;ETH\n          </Row>\n        </Row>\n        {showSuccessScreen ? (\n          <Box as=\"span\" className={caption} color=\"textSecondary\">\n            Status:{' '}\n            <Box as=\"span\" color=\"accentSuccess\">\n              Confirmed\n            </Box>\n          </Box>\n        ) : (\n          <ListingButton onClick={clickStartListingFlow} buttonText=\"Start listing\" showWarningOverride={isMobile} />\n        )}\n        {(listingStatus === ListingStatus.PENDING || listingStatus === ListingStatus.SIGNING) && (\n          <Box\n            as=\"button\"\n            border=\"none\"\n            backgroundColor=\"backgroundSurface\"\n            cursor=\"pointer\"\n            color=\"orange\"\n            className={styles.button}\n            onClick={clickStopListing}\n            type=\"button\"\n          >\n            Stop listing\n          </Box>\n        )}\n      </Column>\n    </Trace>\n  )\n}\n\nexport default ListingModal\n","import { NftRouteResponse, NftTrade } from 'graphql/data/__generated__/types-and-hooks'\nimport { Markets, RouteResponse, RoutingActions, RoutingItem, TokenType } from 'nft/types'\n\nfunction buildRoutingItem(routingItem: NftTrade): RoutingItem {\n  return {\n    action: RoutingActions.Buy,\n    marketplace: routingItem.marketplace.toLowerCase(),\n    amountIn: routingItem.price.value,\n    assetIn: {\n      ETHPrice: routingItem.price.value,\n      baseAsset: routingItem.price.currency,\n      basePrice: routingItem.price.value,\n      baseDecimals: '18',\n    },\n    amountOut: routingItem.amount.toString(),\n    assetOut: {\n      id: routingItem.id,\n      decimals: 18,\n      address: routingItem.contractAddress,\n      priceInfo: {\n        ETHPrice: routingItem.price.value,\n        baseAsset: routingItem.price.currency,\n        basePrice: routingItem.price.value,\n        baseDecimals: '18',\n      },\n      tokenType: routingItem.tokenType as unknown as TokenType,\n      tokenId: routingItem.tokenId,\n      amount: routingItem.amount.toString(),\n      marketplace: routingItem.marketplace.toLowerCase() as Markets,\n      orderSource: 'api',\n    },\n  }\n}\n\nfunction buildRoutingItems(routingItems: NftTrade[]): RoutingItem[] {\n  return routingItems.map(buildRoutingItem)\n}\n\nexport function buildRouteResponse(\n  routeResponse: NftRouteResponse,\n  useErc20Token: boolean\n): { route: RoutingItem[]; routeResponse: RouteResponse } {\n  const route = routeResponse.route ? buildRoutingItems(routeResponse.route) : []\n  return {\n    route,\n    routeResponse: {\n      route,\n      valueToSend: useErc20Token ? undefined : routeResponse.sendAmount.value,\n      data: routeResponse.calldata,\n      to: routeResponse.toAddress,\n    },\n  }\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport clsx from 'clsx'\nimport { OpacityHoverState } from 'components/Common'\nimport { MouseoverTooltip } from 'components/Tooltip'\nimport { NftStandard } from 'graphql/data/__generated__/types-and-hooks'\nimport { Box } from 'nft/components/Box'\nimport { Row } from 'nft/components/Flex'\nimport {\n  MinusIconLarge,\n  PauseButtonIcon,\n  PlayButtonIcon,\n  PlusIconLarge,\n  PoolIcon,\n  RarityVerifiedIcon,\n  VerifiedIcon,\n} from 'nft/components/icons'\nimport { body, bodySmall, buttonTextMedium, subhead } from 'nft/css/common.css'\nimport { themeVars } from 'nft/css/sprinkles.css'\nimport { useIsMobile } from 'nft/hooks'\nimport { GenieAsset, Rarity, UniformAspectRatio, UniformAspectRatios, WalletAsset } from 'nft/types'\nimport { fallbackProvider, isAudio, isVideo, putCommas } from 'nft/utils'\nimport { floorFormatter } from 'nft/utils/numbers'\nimport {\n  createContext,\n  MouseEvent,\n  ReactNode,\n  useCallback,\n  useContext,\n  useLayoutEffect,\n  useMemo,\n  useReducer,\n  useRef,\n  useState,\n} from 'react'\nimport { AlertTriangle } from 'react-feather'\nimport styled from 'styled-components/macro'\nimport { ThemedText } from 'theme'\n\nimport * as styles from './Card.css'\n\n/* -------- ASSET CONTEXT -------- */\nexport interface CardContextProps {\n  asset: GenieAsset | WalletAsset\n  hovered: boolean\n  selected: boolean\n  href: string\n  setHref: (href: string) => void\n  addAssetToBag: () => void\n  removeAssetFromBag: () => void\n}\n\nconst CardContext = createContext<CardContextProps | undefined>(undefined)\n\nconst BORDER_RADIUS = '12'\n\nconst useCardContext = () => {\n  const context = useContext(CardContext)\n  if (!context) throw new Error('Must use context inside of provider')\n  return context\n}\n\nexport enum AssetMediaType {\n  Image,\n  Video,\n  Audio,\n}\n\nconst useNotForSale = (asset: GenieAsset) =>\n  useMemo(() => {\n    let notForSale = true\n    notForSale = asset.notForSale || BigNumber.from(asset.priceInfo ? asset.priceInfo.ETHPrice : 0).lt(0)\n    return notForSale\n  }, [asset])\n\nconst useAssetMediaType = (asset: GenieAsset | WalletAsset) =>\n  useMemo(() => {\n    let assetMediaType = AssetMediaType.Image\n    if (asset.animationUrl) {\n      if (isAudio(asset.animationUrl)) {\n        assetMediaType = AssetMediaType.Audio\n      } else if (isVideo(asset.animationUrl)) {\n        assetMediaType = AssetMediaType.Video\n      }\n    }\n    return assetMediaType\n  }, [asset])\n\nconst baseHref = (asset: GenieAsset | WalletAsset) => {\n  if ('address' in asset) return `/#/nfts/asset/${asset.address}/${asset.tokenId}?origin=collection`\n  if ('asset_contract' in asset) return `/#/nfts/asset/${asset.asset_contract.address}/${asset.tokenId}?origin=profile`\n  return '/#/nfts/profile'\n}\n\nconst DetailsLinkContainer = styled.a`\n  display: flex;\n  align-items: center;\n  flex-shrink: 0;\n  text-decoration: none;\n  font-size: 14px;\n  font-weight: 500;\n  border: 1px solid;\n  color: ${({ theme }) => theme.accentAction};\n  border-color: ${({ theme }) => theme.accentActionSoft};\n  padding: 2px 6px;\n  border-radius: 6px;\n  ${OpacityHoverState};\n`\n\nconst SuspiciousIcon = styled(AlertTriangle)`\n  width: 16px;\n  height: 16px;\n  color: ${({ theme }) => theme.accentFailure};\n`\n\nconst Erc1155ControlsRow = styled.div`\n  position: absolute;\n  display: flex;\n  width: 100%;\n  bottom: 12px;\n  z-index: 2;\n  justify-content: center;\n`\n\nconst Erc1155ControlsContainer = styled.div`\n  display: flex;\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  border-radius: ${BORDER_RADIUS}px;\n  overflow: hidden;\n`\n\nconst Erc1155ControlsDisplay = styled(ThemedText.HeadlineSmall)`\n  display: flex;\n  padding: 6px 8px;\n  width: 60px;\n  background: ${({ theme }) => theme.backgroundBackdrop};\n  justify-content: center;\n  cursor: default;\n`\n\nconst Erc1155ControlsInput = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 40px;\n  background: ${({ theme }) => theme.backgroundInteractive};\n  color: ${({ theme }) => theme.textPrimary};\n\n  :hover {\n    color: ${({ theme }) => theme.accentAction};\n  }\n`\n\nconst RankingContainer = styled.div`\n  position: absolute;\n  top: 12px;\n  left: 12px;\n  z-index: 2;\n`\n\nconst StyledImageContainer = styled.div<{ isDisabled?: boolean }>`\n  position: relative;\n  pointer-events: auto;\n  &:hover {\n    opacity: ${({ isDisabled, theme }) => (isDisabled ? theme.opacity.disabled : theme.opacity.enabled)};\n  }\n  cursor: ${({ isDisabled }) => (isDisabled ? 'default' : 'pointer')};\n`\n\n/* -------- ASSET CARD -------- */\ninterface CardProps {\n  asset: GenieAsset | WalletAsset\n  selected: boolean\n  addAssetToBag: () => void\n  removeAssetFromBag: () => void\n  children: ReactNode\n  isDisabled?: boolean\n  onClick?: () => void\n}\n\nconst Container = ({\n  asset,\n  selected,\n  addAssetToBag,\n  removeAssetFromBag,\n  children,\n  isDisabled,\n  onClick,\n}: CardProps) => {\n  const [hovered, toggleHovered] = useReducer((s) => !s, false)\n  const [href, setHref] = useState(baseHref(asset))\n\n  const providerValue = useMemo(\n    () => ({\n      asset,\n      selected,\n      hovered,\n      toggleHovered,\n      href,\n      setHref,\n      addAssetToBag,\n      removeAssetFromBag,\n    }),\n    [asset, hovered, selected, href, addAssetToBag, removeAssetFromBag]\n  )\n\n  const assetRef = useRef<HTMLDivElement>(null)\n\n  useLayoutEffect(() => {\n    if (hovered && assetRef.current?.matches(':hover') === false) toggleHovered()\n  }, [hovered])\n\n  const handleAssetInBag = (e: MouseEvent) => {\n    if (!asset.notForSale) {\n      e.preventDefault()\n      !selected ? addAssetToBag() : removeAssetFromBag()\n    }\n  }\n\n  const toggleHover = useCallback(() => toggleHovered(), [])\n\n  return (\n    <CardContext.Provider value={providerValue}>\n      <Box\n        position=\"relative\"\n        ref={assetRef}\n        borderRadius={BORDER_RADIUS}\n        className={selected ? styles.selectedCard : styles.card}\n        draggable={false}\n        onMouseEnter={toggleHover}\n        onMouseLeave={toggleHover}\n        transition=\"250\"\n        onClick={isDisabled ? () => null : onClick ?? handleAssetInBag}\n      >\n        {children}\n      </Box>\n    </CardContext.Provider>\n  )\n}\n\nconst ImageContainer = ({ children, isDisabled = false }: { children: ReactNode; isDisabled?: boolean }) => (\n  <StyledImageContainer isDisabled={isDisabled}>{children}</StyledImageContainer>\n)\n\nconst handleUniformAspectRatio = (\n  uniformAspectRatio: UniformAspectRatio,\n  e: React.SyntheticEvent<HTMLElement, Event>,\n  setUniformAspectRatio?: (uniformAspectRatio: UniformAspectRatio) => void,\n  renderedHeight?: number,\n  setRenderedHeight?: (renderedHeight: number | undefined) => void\n) => {\n  if (uniformAspectRatio !== UniformAspectRatios.square && setUniformAspectRatio) {\n    const height = e.currentTarget.clientHeight\n    const width = e.currentTarget.clientWidth\n    const aspectRatio = width / height\n\n    if (\n      (!renderedHeight || renderedHeight !== height) &&\n      aspectRatio < 1 &&\n      uniformAspectRatio !== UniformAspectRatios.square &&\n      setRenderedHeight\n    ) {\n      setRenderedHeight(height)\n    }\n\n    if (uniformAspectRatio === UniformAspectRatios.unset) {\n      setUniformAspectRatio(aspectRatio >= 1 ? UniformAspectRatios.square : aspectRatio)\n    } else if (uniformAspectRatio !== aspectRatio) {\n      setUniformAspectRatio(UniformAspectRatios.square)\n      setRenderedHeight && setRenderedHeight(undefined)\n    }\n  }\n}\n\nfunction getHeightFromAspectRatio(uniformAspectRatio: UniformAspectRatio, renderedHeight?: number): number | undefined {\n  return uniformAspectRatio === UniformAspectRatios.square || uniformAspectRatio === UniformAspectRatios.unset\n    ? undefined\n    : renderedHeight\n}\n\ninterface ImageProps {\n  uniformAspectRatio?: UniformAspectRatio\n  setUniformAspectRatio?: (uniformAspectRatio: UniformAspectRatio) => void\n  renderedHeight?: number\n  setRenderedHeight?: (renderedHeight: number | undefined) => void\n}\n\nconst Image = ({\n  uniformAspectRatio = UniformAspectRatios.square,\n  setUniformAspectRatio,\n  renderedHeight,\n  setRenderedHeight,\n}: ImageProps) => {\n  const { hovered, asset } = useCardContext()\n  const [noContent, setNoContent] = useState(!asset.smallImageUrl && !asset.imageUrl)\n  const [loaded, setLoaded] = useState(false)\n  const isMobile = useIsMobile()\n\n  if (noContent) {\n    return <NoContentContainer height={getHeightFromAspectRatio(uniformAspectRatio, renderedHeight)} />\n  }\n\n  return (\n    <Box display=\"flex\" overflow=\"hidden\" borderTopLeftRadius={BORDER_RADIUS} borderTopRightRadius={BORDER_RADIUS}>\n      <Box\n        as=\"img\"\n        width=\"full\"\n        style={{\n          aspectRatio: `${uniformAspectRatio === UniformAspectRatios.square || !setUniformAspectRatio ? '1' : 'auto'}`,\n          transition: 'transform 0.25s ease 0s',\n        }}\n        src={asset.imageUrl || asset.smallImageUrl}\n        objectFit=\"contain\"\n        draggable={false}\n        onError={() => setNoContent(true)}\n        onLoad={(e) => {\n          handleUniformAspectRatio(uniformAspectRatio, e, setUniformAspectRatio, renderedHeight, setRenderedHeight)\n          setLoaded(true)\n        }}\n        className={clsx(hovered && !isMobile && styles.cardImageHover, !loaded && styles.loadingBackground)}\n      />\n    </Box>\n  )\n}\n\nfunction getMediaAspectRatio(\n  uniformAspectRatio: UniformAspectRatio,\n  setUniformAspectRatio?: (uniformAspectRatio: UniformAspectRatio) => void\n): string {\n  return uniformAspectRatio === UniformAspectRatios.square || !setUniformAspectRatio ? '1' : 'auto'\n}\n\ninterface MediaProps {\n  shouldPlay: boolean\n  setCurrentTokenPlayingMedia: (tokenId: string | undefined) => void\n}\n\nconst Video = ({\n  uniformAspectRatio = UniformAspectRatios.square,\n  setUniformAspectRatio,\n  renderedHeight,\n  setRenderedHeight,\n  shouldPlay,\n  setCurrentTokenPlayingMedia,\n}: MediaProps & ImageProps) => {\n  const vidRef = useRef<HTMLVideoElement>(null)\n  const { hovered, asset } = useCardContext()\n  const [noContent, setNoContent] = useState(!asset.smallImageUrl && !asset.imageUrl)\n  const [imageLoaded, setImageLoaded] = useState(false)\n  const isMobile = useIsMobile()\n\n  if (shouldPlay) {\n    vidRef.current?.play()\n  } else {\n    vidRef.current?.pause()\n  }\n\n  if (noContent) {\n    return <NoContentContainer height={getHeightFromAspectRatio(uniformAspectRatio, renderedHeight)} />\n  }\n\n  return (\n    <>\n      <Box display=\"flex\" overflow=\"hidden\">\n        <Box\n          as=\"img\"\n          alt={asset.name || asset.tokenId}\n          width=\"full\"\n          style={{\n            aspectRatio: getMediaAspectRatio(uniformAspectRatio, setUniformAspectRatio),\n            transition: 'transform 0.25s ease 0s',\n            willChange: 'transform',\n          }}\n          src={asset.imageUrl || asset.smallImageUrl}\n          objectFit=\"contain\"\n          draggable={false}\n          onError={() => setNoContent(true)}\n          onLoad={(e) => {\n            handleUniformAspectRatio(uniformAspectRatio, e, setUniformAspectRatio, renderedHeight, setRenderedHeight)\n            setImageLoaded(true)\n          }}\n          visibility={shouldPlay ? 'hidden' : 'visible'}\n          className={clsx(hovered && !isMobile && styles.cardImageHover, !imageLoaded && styles.loadingBackground)}\n        />\n      </Box>\n      {shouldPlay ? (\n        <>\n          <Box className={styles.playbackSwitch}>\n            <PauseButtonIcon\n              width=\"100%\"\n              height=\"100%\"\n              onClick={(e) => {\n                e.preventDefault()\n                e.stopPropagation()\n                setCurrentTokenPlayingMedia(undefined)\n              }}\n              className=\"playback-icon\"\n            />\n          </Box>\n          <Box position=\"absolute\" left=\"0\" top=\"0\" display=\"flex\">\n            <Box\n              as=\"video\"\n              ref={vidRef}\n              width=\"full\"\n              style={{\n                aspectRatio: `${\n                  uniformAspectRatio === UniformAspectRatios.square || !setUniformAspectRatio ? '1' : 'auto'\n                }`,\n              }}\n              onEnded={(e) => {\n                e.preventDefault()\n                setCurrentTokenPlayingMedia(undefined)\n              }}\n              loop\n              playsInline\n            >\n              <source src={asset.animationUrl} />\n            </Box>\n          </Box>\n        </>\n      ) : (\n        <Box className={styles.playbackSwitch}>\n          {((!isMobile && hovered) || isMobile) && (\n            <PlayButtonIcon\n              width=\"100%\"\n              height=\"100%\"\n              onClick={(e) => {\n                e.preventDefault()\n                e.stopPropagation()\n                setCurrentTokenPlayingMedia(asset.tokenId)\n              }}\n              className=\"playback-icon\"\n            />\n          )}\n        </Box>\n      )}\n    </>\n  )\n}\n\nconst Audio = ({\n  uniformAspectRatio = UniformAspectRatios.square,\n  setUniformAspectRatio,\n  renderedHeight,\n  setRenderedHeight,\n  shouldPlay,\n  setCurrentTokenPlayingMedia,\n}: MediaProps & ImageProps) => {\n  const audRef = useRef<HTMLAudioElement>(null)\n  const { hovered, asset } = useCardContext()\n  const [noContent, setNoContent] = useState(!asset.smallImageUrl && !asset.imageUrl)\n  const [imageLoaded, setImageLoaded] = useState(false)\n  const isMobile = useIsMobile()\n\n  if (shouldPlay) {\n    audRef.current?.play()\n  } else {\n    audRef.current?.pause()\n  }\n\n  if (noContent) {\n    return <NoContentContainer height={getHeightFromAspectRatio(uniformAspectRatio, renderedHeight)} />\n  }\n\n  return (\n    <>\n      <Box display=\"flex\" overflow=\"hidden\">\n        <Box\n          as=\"img\"\n          alt={asset.name || asset.tokenId}\n          width=\"full\"\n          style={{\n            aspectRatio: getMediaAspectRatio(uniformAspectRatio, setUniformAspectRatio),\n            transition: 'transform 0.4s ease 0s',\n          }}\n          src={asset.imageUrl || asset.smallImageUrl}\n          objectFit=\"contain\"\n          draggable={false}\n          onError={() => setNoContent(true)}\n          onLoad={(e) => {\n            handleUniformAspectRatio(uniformAspectRatio, e, setUniformAspectRatio, renderedHeight, setRenderedHeight)\n            setImageLoaded(true)\n          }}\n          className={clsx(hovered && !isMobile && styles.cardImageHover, !imageLoaded && styles.loadingBackground)}\n        />\n      </Box>\n      {shouldPlay ? (\n        <>\n          <Box className={styles.playbackSwitch}>\n            <PauseButtonIcon\n              width=\"100%\"\n              height=\"100%\"\n              onClick={(e) => {\n                e.preventDefault()\n                e.stopPropagation()\n                setCurrentTokenPlayingMedia(undefined)\n              }}\n              className=\"playback-icon\"\n            />\n          </Box>\n          <Box position=\"absolute\" left=\"0\" top=\"0\" display=\"flex\">\n            <Box\n              as=\"audio\"\n              ref={audRef}\n              width=\"full\"\n              height=\"full\"\n              onEnded={(e) => {\n                e.preventDefault()\n                setCurrentTokenPlayingMedia(undefined)\n              }}\n            >\n              <source src={asset.animationUrl} />\n            </Box>\n          </Box>\n        </>\n      ) : (\n        <Box className={styles.playbackSwitch}>\n          {((!isMobile && hovered) || isMobile) && (\n            <PlayButtonIcon\n              width=\"100%\"\n              height=\"100%\"\n              onClick={(e) => {\n                e.preventDefault()\n                e.stopPropagation()\n                setCurrentTokenPlayingMedia(asset.tokenId)\n              }}\n              className=\"playback-icon\"\n            />\n          )}\n        </Box>\n      )}\n    </>\n  )\n}\n\n/* -------- CARD DETAILS CONTAINER -------- */\ninterface CardDetailsContainerProps {\n  children: ReactNode\n}\n\nconst DetailsContainer = ({ children }: CardDetailsContainerProps) => {\n  return (\n    <Row\n      position=\"relative\"\n      paddingX=\"12\"\n      paddingTop=\"12\"\n      justifyContent=\"space-between\"\n      flexDirection=\"column\"\n      transition=\"250\"\n    >\n      {children}\n    </Row>\n  )\n}\n\nconst InfoContainer = ({ children }: { children: ReactNode }) => {\n  return (\n    <Box overflow=\"hidden\" width=\"full\">\n      {children}\n    </Box>\n  )\n}\n\nconst TruncatedTextRow = styled(Row)`\n  padding: 2px;\n  white-space: pre;\n  text-overflow: ellipsis;\n  display: block;\n  overflow: hidden;\n  flex: 1;\n`\n\ninterface ProfileNftDetailsProps {\n  asset: WalletAsset\n  hideDetails: boolean\n}\n\nconst ProfileNftDetails = ({ asset, hideDetails }: ProfileNftDetailsProps) => {\n  const assetName = () => {\n    if (!asset.name && !asset.tokenId) return\n    return asset.name ? asset.name : `#${asset.tokenId}`\n  }\n\n  const shouldShowUserListedPrice = !asset.notForSale && asset.asset_contract.tokenType !== NftStandard.Erc1155\n\n  return (\n    <Box overflow=\"hidden\" width=\"full\" flexWrap=\"nowrap\">\n      <PrimaryRow>\n        <PrimaryDetails>\n          <TruncatedTextRow className={bodySmall} style={{ color: themeVars.colors.textSecondary }}>\n            {!!asset.asset_contract.name && <span>{asset.asset_contract.name}</span>}\n          </TruncatedTextRow>\n          {asset.collectionIsVerified && <VerifiedIcon height=\"18px\" width=\"18px\" />}\n        </PrimaryDetails>\n        {!hideDetails && <DetailsLink />}\n      </PrimaryRow>\n      <Row justifyItems=\"flex-start\">\n        <TruncatedTextRow\n          className={body}\n          style={{\n            color: themeVars.colors.textPrimary,\n          }}\n        >\n          {assetName()}\n        </TruncatedTextRow>\n        {asset.susFlag && <Suspicious />}\n      </Row>\n      <TruncatedTextRow className={buttonTextMedium} style={{ color: themeVars.colors.textPrimary }}>\n        {shouldShowUserListedPrice && asset.floor_sell_order_price\n          ? `${floorFormatter(asset.floor_sell_order_price)} ETH`\n          : ' '}\n      </TruncatedTextRow>\n    </Box>\n  )\n}\n\nconst PrimaryRow = ({ children }: { children: ReactNode }) => (\n  <Row gap=\"8\" justifyContent=\"space-between\">\n    {children}\n  </Row>\n)\n\nconst PrimaryDetails = ({ children }: { children: ReactNode }) => (\n  <Row justifyItems=\"center\" overflow=\"hidden\" whiteSpace=\"nowrap\">\n    {children}\n  </Row>\n)\n\nconst PrimaryInfo = ({ children }: { children: ReactNode }) => {\n  return (\n    <Box overflow=\"hidden\" whiteSpace=\"nowrap\" textOverflow=\"ellipsis\" className={body}>\n      {children}\n    </Box>\n  )\n}\n\nconst SecondaryRow = ({ children }: { children: ReactNode }) => (\n  <Row height=\"20\" justifyContent=\"space-between\" marginTop=\"6\">\n    {children}\n  </Row>\n)\n\nconst SecondaryDetails = ({ children }: { children: ReactNode }) => (\n  <Row overflow=\"hidden\" whiteSpace=\"nowrap\">\n    {children}\n  </Row>\n)\n\nconst SecondaryInfo = ({ children }: { children: ReactNode }) => {\n  return (\n    <Box\n      color=\"textPrimary\"\n      overflow=\"hidden\"\n      whiteSpace=\"nowrap\"\n      textOverflow=\"ellipsis\"\n      style={{ lineHeight: '20px' }}\n      className={subhead}\n    >\n      {children}\n    </Box>\n  )\n}\n\nconst TertiaryInfo = ({ children }: { children: ReactNode }) => {\n  return (\n    <Box marginTop=\"8\" color=\"textSecondary\">\n      {children}\n    </Box>\n  )\n}\n\ninterface Erc1155ControlsInterface {\n  quantity: string\n}\n\nconst Erc1155Controls = ({ quantity }: Erc1155ControlsInterface) => {\n  const { addAssetToBag, removeAssetFromBag } = useCardContext()\n\n  return (\n    <Erc1155ControlsRow>\n      <Erc1155ControlsContainer>\n        <Erc1155ControlsInput\n          onClick={(e: MouseEvent) => {\n            e.stopPropagation()\n            removeAssetFromBag()\n          }}\n        >\n          <MinusIconLarge width=\"24px\" height=\"24px\" />\n        </Erc1155ControlsInput>\n        <Erc1155ControlsDisplay>{quantity}</Erc1155ControlsDisplay>\n        <Erc1155ControlsInput\n          onClick={(e: MouseEvent) => {\n            e.stopPropagation()\n            addAssetToBag()\n          }}\n        >\n          <PlusIconLarge width=\"24px\" height=\"24px\" />\n        </Erc1155ControlsInput>\n      </Erc1155ControlsContainer>\n    </Erc1155ControlsRow>\n  )\n}\n\nconst MarketplaceIcon = ({ marketplace }: { marketplace: string }) => {\n  return (\n    <Box\n      as=\"img\"\n      alt={marketplace}\n      src={`/nft/svgs/marketplaces/${marketplace}.svg`}\n      className={styles.marketplaceIcon}\n    />\n  )\n}\n\nconst DetailsLink = () => {\n  const { asset } = useCardContext()\n\n  return (\n    <DetailsLinkContainer\n      href={baseHref(asset)}\n      onClick={(e: MouseEvent) => {\n        e.stopPropagation()\n      }}\n    >\n      <Box data-testid=\"nft-details-link\">Details</Box>\n    </DetailsLinkContainer>\n  )\n}\n\n/* -------- RANKING CARD -------- */\ninterface RankingProps {\n  rarity: Rarity\n  provider: { url?: string; rank?: number }\n  rarityVerified: boolean\n  rarityLogo?: string\n}\n\nconst Ranking = ({ rarity, provider, rarityVerified, rarityLogo }: RankingProps) => {\n  const { asset } = useCardContext()\n\n  return (\n    <>\n      {provider.rank && (\n        <RankingContainer>\n          <MouseoverTooltip\n            text={\n              <Row>\n                <Box display=\"flex\" marginRight=\"4\">\n                  <img src={rarityLogo} alt=\"cardLogo\" width={16} />\n                </Box>\n                <Box width=\"full\" className={bodySmall}>\n                  {rarityVerified\n                    ? `Verified by ${\n                        ('collectionName' in asset && asset.collectionName) ||\n                        ('asset_contract' in asset && asset.asset_contract?.name)\n                      }`\n                    : `Ranking by ${rarity.primaryProvider === 'Genie' ? fallbackProvider : rarity.primaryProvider}`}\n                </Box>\n              </Row>\n            }\n            placement=\"top\"\n          >\n            <Box className={styles.rarityInfo}>\n              <Box paddingTop=\"2\" paddingBottom=\"2\" display=\"flex\">\n                {putCommas(provider.rank)}\n              </Box>\n\n              <Box display=\"flex\" height=\"16\">\n                {rarityVerified ? <RarityVerifiedIcon /> : null}\n              </Box>\n            </Box>\n          </MouseoverTooltip>\n        </RankingContainer>\n      )}\n    </>\n  )\n}\nconst SUSPICIOUS_TEXT = 'Blocked on OpenSea'\n\nconst Suspicious = () => {\n  return (\n    <MouseoverTooltip text={<Box className={bodySmall}>{SUSPICIOUS_TEXT}</Box>} placement=\"top\">\n      <Box display=\"flex\" flexShrink=\"0\" marginLeft=\"4\">\n        <SuspiciousIcon />\n      </Box>\n    </MouseoverTooltip>\n  )\n}\n\nconst Pool = () => {\n  return (\n    <MouseoverTooltip\n      text={\n        <Box className={bodySmall}>\n          This NFT is part of a liquidity pool. Buying this will increase the price of the remaining pooled NFTs.\n        </Box>\n      }\n      placement=\"top\"\n    >\n      <Box display=\"flex\" flexShrink=\"0\" marginLeft=\"4\" color=\"textSecondary\">\n        <PoolIcon width=\"20\" height=\"20\" />\n      </Box>\n    </MouseoverTooltip>\n  )\n}\n\nconst NoContentContainer = ({ height }: { height?: number }) => (\n  <>\n    <Box\n      position=\"relative\"\n      width=\"full\"\n      style={{\n        height: height ? `${height}px` : 'auto',\n        paddingTop: '100%',\n        background: `linear-gradient(90deg, ${themeVars.colors.backgroundSurface} 0%, ${themeVars.colors.backgroundInteractive} 95.83%)`,\n      }}\n    >\n      <Box\n        position=\"absolute\"\n        textAlign=\"center\"\n        left=\"1/2\"\n        top=\"1/2\"\n        style={{ transform: 'translate3d(-50%, -50%, 0)' }}\n        color=\"gray500\"\n        className={body}\n      >\n        Content not\n        <br />\n        available yet\n      </Box>\n    </Box>\n  </>\n)\n\nexport {\n  Audio,\n  Container,\n  DetailsContainer,\n  DetailsLink,\n  Erc1155Controls,\n  Image,\n  ImageContainer,\n  InfoContainer,\n  MarketplaceIcon,\n  Pool,\n  PrimaryDetails,\n  PrimaryInfo,\n  PrimaryRow,\n  ProfileNftDetails,\n  Ranking,\n  SecondaryDetails,\n  SecondaryInfo,\n  SecondaryRow,\n  Suspicious,\n  SUSPICIOUS_TEXT,\n  TertiaryInfo,\n  useAssetMediaType,\n  useNotForSale,\n  Video,\n}\n","import { Box } from 'nft/components/Box'\nimport styled, { keyframes } from 'styled-components/macro'\n\nconst dash = keyframes`\n  0% {\n    stroke-dashoffset: 1000;\n  }\n  100% {\n    stroke-dashoffset: 0;\n  }\n`\nconst Circle = styled.circle`\n  stroke-dasharray: 1000;\n  stroke-dashoffset: 0;\n  -webkit-animation: ${dash} linear;\n  animation: ${dash} linear;\n  animation-duration: 160s;\n  stroke: ${({ theme }) => theme.accentAction};\n`\nexport const TimedLoader = () => {\n  const stroke = 1.5\n\n  return (\n    <Box display=\"flex\" position=\"absolute\">\n      <svg height=\"18px\" width=\"18px\">\n        <Circle\n          strokeWidth={`${stroke}`}\n          strokeLinecap=\"round\"\n          style={{\n            transform: 'rotate(90deg)',\n            transformOrigin: '50% 50%',\n          }}\n          fill=\"transparent\"\n          r=\"8px\"\n          cx=\"9px\"\n          cy=\"9px\"\n        />\n      </svg>\n    </Box>\n  )\n}\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/css/common.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/common.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xMjdsOGhkYyB7CiAgYm9yZGVyOiBub25lOwp9Ci5fMTI3bDhoZGM6aG92ZXIgewogIGN1cnNvcjogcG9pbnRlcjsKfQouXzEyN2w4aGRjOmRpc2FibGVkIHsKICBjdXJzb3I6IGF1dG87Cn0KLl8xMjdsOGhkZDo6YmVmb3JlIHsKICBjb250ZW50OiAiIjsKICBwb3NpdGlvbjogYWJzb2x1dGU7CiAgaW5zZXQ6IC0xcHg7CiAgYmFja2dyb3VuZDogbGluZWFyLWdyYWRpZW50KDkxLjQ2ZGVnLCAjNDY3M0ZBIDAlLCAjOTY0NkZBIDEwMC4xMyUpIGJvcmRlci1ib3g7CiAgYm9yZGVyLWNvbG9yOiB0cmFuc3BhcmVudDsKICAtd2Via2l0LW1hc2s6IGxpbmVhci1ncmFkaWVudCgjZmZmIDAgMCkgcGFkZGluZy1ib3gsIGxpbmVhci1ncmFkaWVudCgjZmZmIDAgMCk7OwogIC13ZWJraXQtbWFzay1jb21wb3NpdGU6IHhvcjs7CiAgbWFzay1jb21wb3NpdGU6IGV4Y2x1ZGU7CiAgYm9yZGVyLXN0eWxlOiBzb2xpZDsKICBib3JkZXItd2lkdGg6IDFweDsKICBib3JkZXItcmFkaXVzOiBpbmhlcml0OwogIHBvaW50ZXItZXZlbnRzOiBub25lOwp9Ci5fMTI3bDhoZGU6OmJlZm9yZSB7CiAgb3BhY2l0eTogMDsKICAtd2Via2l0LXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICAtbW96LXRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZTsKICAtbXMtdHJhbnNpdGlvbjogb3BhY2l0eSAwLjI1cyBlYXNlOwogIHRyYW5zaXRpb246IG9wYWNpdHkgMC4yNXMgZWFzZS1vdXQ7Cn0KLl8xMjdsOGhkZTpob3Zlcjo6YmVmb3JlIHsKICBvcGFjaXR5OiAxOwp9Ci5fMTI3bDhoZGc6aG92ZXIgewogIGJhY2tncm91bmQ6IHZhcigtLXJndzZlejF4KTsKfQ==\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/bag/BagRow.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/bag/BagRow.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xa3Vhd2MxIHsKICBtYXJnaW4tbGVmdDogLTRweDsKICBtYXJnaW4tcmlnaHQ6IC00cHg7Cn0KLl8xa3Vhd2MxOmhvdmVyIHsKICBiYWNrZ3JvdW5kOiB2YXIoLS1nZW5pZS1jb2xvcnMtc3RhdGVPdmVybGF5SG92ZXIpOwp9Ci5fMWt1YXdjNyB7CiAgZmlsdGVyOiBncmF5c2NhbGUoMTAwJSk7Cn0KLl8xa3Vhd2M5IHsKICBsaW5lLWhlaWdodDogMjRweDsKfQouXzFrdWF3Y2IgewogIGxpbmUtaGVpZ2h0OiAyNHB4Owp9\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var bagRow = '_1kuawc1 rgw6ez2cw rgw6ez2ie rgw6ez2nk rgw6ez272 rgw6ez4dq rgw6ez3sk rgw6ez7ai rgw6ez1dq rgw6ez7c2';\nexport var unavailableAssetsContainer = 'rgw6ez2o8 rgw6ez27q rgw6ezlk rgw6ezr2 rgw6ez4rw rgw6ez3sk rgw6ez4dq rgw6ez7au rgw6ez7ka rgw6ez53q rgw6ez60k rgw6ez5ok rgw6ez1dq';\nexport var priceChangeColumn = 'rgw6ez2o8 rgw6ez27q rgw6ezlk rgw6ezr2 rgw6ez4rw rgw6ez3s8 rgw6ez4dq rgw6ez7au rgw6ez7ka rgw6ez53q rgw6ez5ok rgw6ez1dq rgw6ez7ai';\nexport var priceChangeRow = 'rgw6ezcq rgw6ezaw rgw6eze8 rgw6ez4be rgw6ez3rw';\nexport var bagRowImage = 'rgw6ez14e rgw6ez1b8 rgw6ez48q rgw6ez7bu';\nexport var grayscaleImage = '_1kuawc7';\nexport var bagRowPrice = '_1kuawc9 rgw6ez3rw rgw6ezb2 rgw6ezd2 rgw6ez3ww';\nexport var assetName = '_1kuawcb rgw6ezb2 rgw6ezcw rgw6ez7mm rgw6ez44w rgw6ez44q';\nexport var collectionName = 'rgw6ezcq rgw6ezaw rgw6eze8 rgw6ez7mm rgw6ez44q rgw6ez44w rgw6ez4dw';\nexport var icon = 'rgw6ez3ww';","import { BigNumber } from '@ethersproject/bignumber'\nimport { formatEther } from '@ethersproject/units'\nimport clsx from 'clsx'\nimport { ButtonEmphasis, ButtonSize, ThemeButton } from 'components/Button'\nimport { TimedLoader } from 'nft/components/bag/TimedLoader'\nimport { Box } from 'nft/components/Box'\nimport { Suspicious } from 'nft/components/collection/Card'\nimport { Column, Row } from 'nft/components/Flex'\nimport {\n  ChevronDownBagIcon,\n  ChevronUpBagIcon,\n  CircularCloseIcon,\n  CloseTimerIcon,\n  SquareArrowDownIcon,\n  SquareArrowUpIcon,\n  VerifiedIcon,\n} from 'nft/components/icons'\nimport { bodySmall } from 'nft/css/common.css'\nimport { loadingBlock } from 'nft/css/loading.css'\nimport { GenieAsset, UpdatedGenieAsset } from 'nft/types'\nimport { ethNumberStandardFormatter, formatWeiToDecimal, getAssetHref } from 'nft/utils'\nimport { MouseEvent, useCallback, useEffect, useReducer, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport styled from 'styled-components/macro'\n\nimport * as styles from './BagRow.css'\n\nexport const RemoveButton = styled(ThemeButton)`\n  border-radius: 12px;\n  font-size: 14px;\n  line-height: 16px;\n  margin-left: 16px;\n  padding: 12px 14px;\n`\nconst ReviewButton = styled(ThemeButton)`\n  border-radius: 12px;\n  flex: 1 1 auto;\n  font-size: 14px;\n  padding: 8px;\n  width: 50%;\n`\nconst RemoveAssetOverlay = styled.div`\n  position: absolute;\n  display: block;\n  right: -11px;\n  top: -11px;\n  z-index: 1;\n  transition: 250ms;\n  width: 45px;\n  height: 45px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`\n\nexport const RemoveAssetButton = ({ onClick }: { onClick: (e: MouseEvent<HTMLDivElement>) => void }) => (\n  <RemoveAssetOverlay onClick={onClick}>\n    <CircularCloseIcon />\n  </RemoveAssetOverlay>\n)\n\nconst NoContentContainer = () => (\n  <Box position=\"relative\" background=\"loadingBackground\" className={styles.bagRowImage}>\n    <Box\n      position=\"absolute\"\n      textAlign=\"center\"\n      left=\"1/2\"\n      top=\"1/2\"\n      style={{ transform: 'translate3d(-50%, -50%, 0)' }}\n      color=\"gray500\"\n      fontSize=\"12\"\n      fontWeight=\"normal\"\n    >\n      Image\n      <br />\n      not\n      <br />\n      available\n    </Box>\n  </Box>\n)\n\ninterface BagRowProps {\n  asset: UpdatedGenieAsset\n  usdPrice: number | undefined\n  removeAsset: (assets: GenieAsset[]) => void\n  showRemove?: boolean\n  grayscale?: boolean\n  isMobile: boolean\n}\n\nexport const BagRow = ({ asset, usdPrice, removeAsset, showRemove, grayscale, isMobile }: BagRowProps) => {\n  const [loadedImage, setImageLoaded] = useState(false)\n  const [noImageAvailable, setNoImageAvailable] = useState(!asset.smallImageUrl)\n\n  const [cardHovered, setCardHovered] = useState(false)\n  const handleMouseEnter = useCallback(() => setCardHovered(true), [])\n  const handleMouseLeave = useCallback(() => setCardHovered(false), [])\n  const showRemoveButton = Boolean(showRemove && cardHovered && !isMobile)\n\n  const assetEthPrice = asset.updatedPriceInfo ? asset.updatedPriceInfo.ETHPrice : asset.priceInfo.ETHPrice\n  const assetEthPriceFormatted = formatWeiToDecimal(assetEthPrice)\n  const assetUSDPriceFormatted = ethNumberStandardFormatter(\n    usdPrice ? parseFloat(formatEther(assetEthPrice)) * usdPrice : usdPrice,\n    true\n  )\n\n  const handleRemoveClick = useCallback(\n    (e: MouseEvent<HTMLElement>) => {\n      e.preventDefault()\n      e.stopPropagation()\n      removeAsset([asset])\n    },\n    [asset, removeAsset]\n  )\n\n  return (\n    <Link to={getAssetHref(asset)} style={{ textDecoration: 'none' }}>\n      <Row className={styles.bagRow} onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave}>\n        <Box position=\"relative\" display=\"flex\">\n          {showRemove && isMobile && <RemoveAssetButton onClick={handleRemoveClick} />}\n          {!noImageAvailable && (\n            <Box\n              as=\"img\"\n              src={asset.smallImageUrl}\n              alt={asset.name}\n              className={clsx(styles.bagRowImage, grayscale && !cardHovered && styles.grayscaleImage)}\n              onLoad={() => {\n                setImageLoaded(true)\n              }}\n              onError={() => {\n                setNoImageAvailable(true)\n              }}\n              visibility={loadedImage ? 'visible' : 'hidden'}\n            />\n          )}\n          {!loadedImage && <Box position=\"absolute\" className={`${styles.bagRowImage} ${loadingBlock}`} />}\n          {noImageAvailable && <NoContentContainer />}\n        </Box>\n        <Column overflow=\"hidden\" width=\"full\" color={grayscale ? 'textSecondary' : 'textPrimary'}>\n          <Row overflow=\"hidden\" width=\"full\" whiteSpace=\"nowrap\">\n            <Box className={styles.assetName}>{asset.name ?? `#${asset.tokenId}`}</Box>\n            {asset.susFlag && <Suspicious />}\n          </Row>\n          <Row overflow=\"hidden\" whiteSpace=\"nowrap\" gap=\"2\">\n            <Box className={styles.collectionName}>{asset.collectionName}</Box>\n            {asset.collectionIsVerified && <VerifiedIcon className={styles.icon} />}\n          </Row>\n        </Column>\n        {showRemoveButton && (\n          <RemoveButton onClick={handleRemoveClick} emphasis={ButtonEmphasis.medium} size={ButtonSize.medium}>\n            Remove\n          </RemoveButton>\n        )}\n        {(!showRemoveButton || isMobile) && (\n          <Column flexShrink=\"0\" alignItems=\"flex-end\">\n            <Box className={styles.bagRowPrice}>\n              {assetEthPriceFormatted}\n              &nbsp;ETH\n            </Box>\n            <Box className={styles.collectionName}>{assetUSDPriceFormatted}</Box>\n          </Column>\n        )}\n      </Row>\n    </Link>\n  )\n}\n\ninterface PriceChangeBagRowProps {\n  asset: UpdatedGenieAsset\n  usdPrice: number | undefined\n  markAssetAsReviewed: (asset: UpdatedGenieAsset, toKeep: boolean) => void\n  top?: boolean\n  isMobile: boolean\n}\n\nexport const PriceChangeBagRow = ({ asset, usdPrice, markAssetAsReviewed, top, isMobile }: PriceChangeBagRowProps) => {\n  const isPriceIncrease = BigNumber.from(asset.updatedPriceInfo?.ETHPrice).gt(BigNumber.from(asset.priceInfo.ETHPrice))\n  const handleRemove = useCallback(\n    (e: MouseEvent<HTMLButtonElement>) => {\n      e.preventDefault()\n      e.stopPropagation()\n      const toKeep = false\n      markAssetAsReviewed(asset, toKeep)\n    },\n    [asset, markAssetAsReviewed]\n  )\n  const handleKeep = useCallback(\n    (e: MouseEvent<HTMLButtonElement>) => {\n      e.preventDefault()\n      e.stopPropagation()\n      const toKeep = true\n      markAssetAsReviewed(asset, toKeep)\n    },\n    [asset, markAssetAsReviewed]\n  )\n  return (\n    <Column className={styles.priceChangeColumn} borderTopColor={top ? 'backgroundOutline' : 'transparent'}>\n      <Row className={styles.priceChangeRow}>\n        {isPriceIncrease ? <SquareArrowUpIcon /> : <SquareArrowDownIcon />}\n        <Box>{`Price ${isPriceIncrease ? 'increased' : 'decreased'} from ${formatWeiToDecimal(\n          asset.priceInfo.ETHPrice\n        )} ETH`}</Box>\n      </Row>\n      <Box style={{ marginLeft: '-8px', marginRight: '-8px' }}>\n        <BagRow asset={asset} usdPrice={usdPrice} removeAsset={() => undefined} isMobile={isMobile} />\n      </Box>\n      <Row gap=\"8\" justifyContent=\"space-between\">\n        <ReviewButton onClick={handleRemove} emphasis={ButtonEmphasis.medium} size={ButtonSize.small}>\n          Remove\n        </ReviewButton>\n        <ReviewButton onClick={handleKeep} emphasis={ButtonEmphasis.high} size={ButtonSize.small}>\n          Keep\n        </ReviewButton>\n      </Row>\n    </Column>\n  )\n}\n\ninterface UnavailableAssetsHeaderRowProps {\n  assets?: UpdatedGenieAsset[]\n  usdPrice: number | undefined\n  clearUnavailableAssets: () => void\n  didOpenUnavailableAssets: boolean\n  setDidOpenUnavailableAssets: (didOpen: boolean) => void\n  isMobile: boolean\n}\n\ninterface UnavailableAssetsPreviewProps {\n  assets: UpdatedGenieAsset[]\n}\n\nconst ASSET_PREVIEW_WIDTH = 32\nconst ASSET_PREVIEW_OFFSET = 20\n\nconst UnavailableAssetsPreview = ({ assets }: UnavailableAssetsPreviewProps) => (\n  <Column\n    display=\"grid\"\n    style={{\n      gridTemplateColumns: `repeat(${assets.length}, 20px)`,\n      width: `${ASSET_PREVIEW_WIDTH + (assets.length - 1) * ASSET_PREVIEW_OFFSET}px`,\n    }}\n  >\n    {assets.map((asset, index) => (\n      <Box\n        key={`${asset.address}-${asset.tokenId}`}\n        as=\"img\"\n        src={asset.smallImageUrl}\n        width=\"32\"\n        height=\"32\"\n        borderStyle=\"solid\"\n        borderWidth=\"1px\"\n        borderColor=\"backgroundSurface\"\n        borderRadius=\"4\"\n        style={{ zIndex: index }}\n        className={styles.grayscaleImage}\n      />\n    ))}\n  </Column>\n)\n\nexport const UnavailableAssetsHeaderRow = ({\n  assets,\n  usdPrice,\n  clearUnavailableAssets,\n  didOpenUnavailableAssets,\n  setDidOpenUnavailableAssets,\n  isMobile,\n}: UnavailableAssetsHeaderRowProps) => {\n  const [isOpen, toggleOpen] = useReducer((s) => !s, false)\n  const timerLimit = 8\n  const [timeLeft, setTimeLeft] = useState(timerLimit)\n\n  useEffect(() => {\n    if (!timeLeft) {\n      if (!didOpenUnavailableAssets) {\n        clearUnavailableAssets()\n        setDidOpenUnavailableAssets(false)\n      }\n      return\n    }\n\n    const intervalId = setInterval(() => {\n      setTimeLeft(timeLeft - 1)\n    }, 1000)\n\n    return () => clearInterval(intervalId)\n  }, [timeLeft, clearUnavailableAssets, didOpenUnavailableAssets, setDidOpenUnavailableAssets])\n\n  if (!assets || assets.length === 0) return null\n\n  const moreThanOneUnavailable = assets.length > 1\n  const isShowingAssets = isOpen || !moreThanOneUnavailable\n\n  return (\n    <Column className={styles.unavailableAssetsContainer}>\n      <Column>\n        <Row\n          justifyContent=\"space-between\"\n          marginBottom={isShowingAssets ? '12' : '0'}\n          cursor={moreThanOneUnavailable ? 'pointer' : 'default'}\n          onClick={() => {\n            if (moreThanOneUnavailable) {\n              !didOpenUnavailableAssets && setDidOpenUnavailableAssets(true)\n              toggleOpen()\n            }\n          }}\n        >\n          <Row gap=\"12\" color=\"textSecondary\" className={bodySmall}>\n            {!isShowingAssets && <UnavailableAssetsPreview assets={assets.slice(0, 5)} />}\n            No longer available\n          </Row>\n          {moreThanOneUnavailable && (\n            <Row color=\"textSecondary\">{isOpen ? <ChevronUpBagIcon /> : <ChevronDownBagIcon />}</Row>\n          )}\n          {!didOpenUnavailableAssets && (\n            <Row\n              position=\"relative\"\n              width=\"20\"\n              height=\"20\"\n              color=\"textPrimary\"\n              justifyContent=\"center\"\n              cursor=\"pointer\"\n              onClick={clearUnavailableAssets}\n            >\n              <TimedLoader />\n              <CloseTimerIcon />\n            </Row>\n          )}\n        </Row>\n        <Column gap=\"8\" style={{ marginLeft: '-8px', marginRight: '-8px' }}>\n          {isShowingAssets &&\n            assets.map((asset) => (\n              <BagRow\n                key={asset.id}\n                asset={asset}\n                usdPrice={usdPrice}\n                removeAsset={() => undefined}\n                grayscale\n                isMobile={isMobile}\n              />\n            ))}\n        </Column>\n      </Column>\n    </Column>\n  )\n}\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#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\\\"}!../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/css/loading.css.ts.vanilla.css!=!../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/loading.css.ts.vanilla.css\\\",\\\"source\\\":\\\"QGtleWZyYW1lcyBfMmtkdmZ3MCB7CiAgMCUgewogICAgYmFja2dyb3VuZC1wb3NpdGlvbjogMTAwJSA1MCU7CiAgfQogIDEwMCUgewogICAgYmFja2dyb3VuZC1wb3NpdGlvbjogMCUgNTAlOwogIH0KfQouXzJrZHZmdzEgewogIGFuaW1hdGlvbjogXzJrZHZmdzAgMS41cyBpbmZpbml0ZTsKICBhbmltYXRpb24tZmlsbC1tb2RlOiBib3RoOwogIGJhY2tncm91bmQ6IGxpbmVhci1ncmFkaWVudCh0byBsZWZ0LCAjN0M4NUEyNEQgMjUlLCByZ2JhKDAsMCwwLDAuMykgNTAlLCAjN0M4NUEyNEQgNzUlKTsKICBiYWNrZ3JvdW5kLXNpemU6IDQwMCU7CiAgd2lsbC1jaGFuZ2U6IGJhY2tncm91bmQtcG9zaXRpb247Cn0KLl8ya2R2ZnczIHsKICB1c2VyLXNlbGVjdDogbm9uZTsKfQ==\\\"}!../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var loadingBlock = '_2kdvfw1';\nexport var loadingAsset = '_2kdvfw3 _2kdvfw1 rgw6ez7c2 rgw6ez7ae rgw6ez4fq';","import { sendAnalyticsEvent, Trace } from '@uniswap/analytics'\nimport { NFTEventName } from '@uniswap/analytics-events'\nimport { BagRow, PriceChangeBagRow, UnavailableAssetsHeaderRow } from 'nft/components/bag/BagRow'\nimport { Column } from 'nft/components/Flex'\nimport { useBag, useIsMobile } from 'nft/hooks'\nimport { BagItemStatus, BagStatus } from 'nft/types'\nimport { fetchPrice, formatAssetEventProperties, recalculateBagUsingPooledAssets } from 'nft/utils'\nimport { useEffect, useMemo } from 'react'\nimport { useQuery } from 'react-query'\n\nexport const BagContent = () => {\n  const bagStatus = useBag((s) => s.bagStatus)\n  const setBagStatus = useBag((s) => s.setBagStatus)\n  const markAssetAsReviewed = useBag((s) => s.markAssetAsReviewed)\n  const didOpenUnavailableAssets = useBag((s) => s.didOpenUnavailableAssets)\n  const setDidOpenUnavailableAssets = useBag((s) => s.setDidOpenUnavailableAssets)\n  const uncheckedItemsInBag = useBag((s) => s.itemsInBag)\n  const setItemsInBag = useBag((s) => s.setItemsInBag)\n  const removeAssetsFromBag = useBag((s) => s.removeAssetsFromBag)\n\n  const isMobile = useIsMobile()\n\n  const itemsInBag = useMemo(() => {\n    return recalculateBagUsingPooledAssets(uncheckedItemsInBag)\n  }, [uncheckedItemsInBag])\n\n  const { data: fetchedPriceData } = useQuery(['fetchPrice', {}], () => fetchPrice(), {})\n\n  const { unchangedAssets, priceChangedAssets, unavailableAssets, availableItems } = useMemo(() => {\n    const unchangedAssets = itemsInBag\n      .filter((item) => item.status === BagItemStatus.ADDED_TO_BAG || item.status === BagItemStatus.REVIEWED)\n      .map((item) => item.asset)\n    const priceChangedAssets = itemsInBag\n      .filter((item) => item.status === BagItemStatus.REVIEWING_PRICE_CHANGE)\n      .map((item) => item.asset)\n    const unavailableAssets = itemsInBag\n      .filter((item) => item.status === BagItemStatus.UNAVAILABLE)\n      .map((item) => item.asset)\n    const availableItems = itemsInBag.filter((item) => item.status !== BagItemStatus.UNAVAILABLE)\n\n    return { unchangedAssets, priceChangedAssets, unavailableAssets, availableItems }\n  }, [itemsInBag])\n\n  useEffect(() => {\n    const hasAssetsInReview = priceChangedAssets.length > 0\n    const hasAssets = itemsInBag.length > 0\n\n    if (hasAssetsInReview)\n      sendAnalyticsEvent(NFTEventName.NFT_BUY_BAG_CHANGED, {\n        usd_value: fetchedPriceData,\n        bag_quantity: itemsInBag,\n        ...formatAssetEventProperties(priceChangedAssets),\n      })\n\n    if (bagStatus === BagStatus.IN_REVIEW && !hasAssetsInReview) {\n      if (hasAssets) setBagStatus(BagStatus.CONFIRM_REVIEW)\n      else setBagStatus(BagStatus.ADDING_TO_BAG)\n    }\n\n    if (bagStatus === BagStatus.CONFIRM_REVIEW && !hasAssets) {\n      setBagStatus(BagStatus.ADDING_TO_BAG)\n    }\n  }, [bagStatus, itemsInBag, priceChangedAssets, setBagStatus, fetchedPriceData])\n\n  return (\n    <>\n      <Column display={priceChangedAssets.length > 0 || unavailableAssets.length > 0 ? 'flex' : 'none'}>\n        {unavailableAssets.length > 0 && (\n          <Trace\n            name={NFTEventName.NFT_BUY_BAG_CHANGED}\n            properties={{\n              usd_value: fetchedPriceData,\n              bag_quantity: itemsInBag.length,\n              ...formatAssetEventProperties(unavailableAssets),\n            }}\n            shouldLogImpression\n          >\n            <UnavailableAssetsHeaderRow\n              assets={unavailableAssets}\n              usdPrice={fetchedPriceData}\n              clearUnavailableAssets={() => setItemsInBag(availableItems)}\n              didOpenUnavailableAssets={didOpenUnavailableAssets}\n              setDidOpenUnavailableAssets={setDidOpenUnavailableAssets}\n              isMobile={isMobile}\n            />\n          </Trace>\n        )}\n        {priceChangedAssets.map((asset, index) => (\n          <PriceChangeBagRow\n            key={asset.id}\n            asset={asset}\n            usdPrice={fetchedPriceData}\n            markAssetAsReviewed={markAssetAsReviewed}\n            top={index === 0 && unavailableAssets.length === 0}\n            isMobile={isMobile}\n          />\n        ))}\n      </Column>\n      <Column>\n        {unchangedAssets\n          .slice(0)\n          .reverse()\n          .map((asset) => (\n            <BagRow\n              key={asset.id}\n              asset={asset}\n              usdPrice={fetchedPriceData}\n              removeAsset={removeAssetsFromBag}\n              showRemove={true}\n              isMobile={isMobile}\n            />\n          ))}\n      </Column>\n    </>\n  )\n}\n","import { OpacityHoverState } from 'components/Common'\nimport { BagCloseIcon } from 'nft/components/icons'\nimport { useMemo } from 'react'\nimport styled from 'styled-components/macro'\nimport { ButtonText, ThemedText } from 'theme'\n\nconst ClearButton = styled(ButtonText)`\n  color: ${({ theme }) => theme.textSecondary};\n  cursor: pointer;\n  font-weight: 600;\n  font-size: 14px;\n  line-height: 16px;\n\n  :active {\n    text-decoration: none;\n  }\n`\n\nconst IconWrapper = styled.button`\n  align-items: center;\n  background-color: transparent;\n  border-radius: 8px;\n  border: none;\n  color: ${({ theme }) => theme.textPrimary};\n  cursor: pointer;\n  display: flex;\n  flex-direction: row;\n  justify-content: flex-end;\n  margin-left: auto;\n  padding: 2px;\n  opacity: 1;\n\n  ${OpacityHoverState}\n`\nconst CounterDot = styled.div<{ sizing: string }>`\n  align-items: center;\n  background-color: ${({ theme }) => theme.accentAction};\n  border-radius: 100px;\n  font-weight: bold;\n  color: ${({ theme }) => theme.accentTextLightPrimary};\n  display: flex;\n  font-size: 10px;\n  justify-content: center;\n  min-width: ${({ sizing }) => sizing};\n  min-height: ${({ sizing }) => sizing};\n  padding: 4px 6px;\n`\nconst Wrapper = styled.div`\n  align-items: center;\n  display: flex;\n  flex-direction: row;\n  gap: 8px;\n  justify-content: flex-start;\n  margin: 16px 28px;\n  text-align: center;\n`\ninterface BagHeaderProps {\n  numberOfAssets: number\n  closeBag: () => void\n  resetFlow: () => void\n  isProfilePage: boolean\n}\n\nconst BASE_SIZING = 14\nconst INCREMENTAL_SIZING = 6\n\nconst getCircleSizing = (numberOfAssets: number): string => {\n  const numberOfCharacters = numberOfAssets.toString().length\n\n  // each digit adds 6px worth of width (approximately), so I set the height and width to be 6px larger for each digit added\n  // 1 digit => 14 + 6, 2 digit 14 + 12, etc.\n  return `${BASE_SIZING + INCREMENTAL_SIZING * numberOfCharacters}px`\n}\n\nexport const BagHeader = ({ numberOfAssets, closeBag, resetFlow, isProfilePage }: BagHeaderProps) => {\n  const sizing = useMemo(() => getCircleSizing(numberOfAssets), [numberOfAssets])\n\n  return (\n    <Wrapper>\n      <ThemedText.HeadlineSmall>{isProfilePage ? <>Sell</> : <>Bag</>}</ThemedText.HeadlineSmall>\n      {numberOfAssets > 0 && (\n        <>\n          <CounterDot sizing={sizing}>{numberOfAssets}</CounterDot>\n          <ClearButton onClick={resetFlow}>\n            <>Clear all</>\n          </ClearButton>\n        </>\n      )}\n      <IconWrapper onClick={closeBag}>\n        <BagCloseIcon data-testid=\"nft-bag-close-icon\" />\n      </IconWrapper>\n    </Wrapper>\n  )\n}\n","import { useIsNftProfilePage } from 'hooks/useIsNftPage'\nimport { Center, Column } from 'nft/components/Flex'\nimport { BagIcon, LargeTagIcon } from 'nft/components/icons'\nimport { subhead } from 'nft/css/common.css'\nimport { themeVars } from 'nft/css/sprinkles.css'\nimport styled from 'styled-components/macro'\n\nconst StyledColumn = styled(Column)`\n  gap: 12px;\n  margin-top: 68px;\n`\n\nconst EmptyState = () => {\n  const isProfilePage = useIsNftProfilePage()\n\n  return (\n    <StyledColumn>\n      <Center>\n        {isProfilePage ? (\n          <LargeTagIcon color={themeVars.colors.textTertiary} />\n        ) : (\n          <BagIcon color={themeVars.colors.textTertiary} height=\"96px\" width=\"96px\" strokeWidth=\"1px\" />\n        )}\n      </Center>\n      {isProfilePage ? (\n        <Center data-testid=\"nft-no-nfts-selected\" className={subhead}>\n          No NFTs selected\n        </Center>\n      ) : (\n        <Column gap=\"16\">\n          <Center data-testid=\"nft-empty-bag\" className={subhead} style={{ lineHeight: '24px' }}>\n            Your bag is empty\n          </Center>\n          <Center fontSize=\"12\" fontWeight=\"normal\" color=\"textSecondary\" style={{ lineHeight: '16px' }}>\n            Selected NFTs will appear here\n          </Center>\n        </Column>\n      )}\n    </StyledColumn>\n  )\n}\n\nexport default EmptyState\n","import { ButtonEmphasis, ButtonSize } from 'components/Button'\nimport { Box } from 'nft/components/Box'\nimport { Column, Row } from 'nft/components/Flex'\nimport { VerifiedIcon } from 'nft/components/icons'\nimport { useIsMobile, useSellAsset } from 'nft/hooks'\nimport { WalletAsset } from 'nft/types'\nimport { useState } from 'react'\n\nimport { RemoveAssetButton, RemoveButton } from '../BagRow'\nimport * as styles from '../BagRow.css'\n\nconst ProfileAssetRow = ({ asset }: { asset: WalletAsset }) => {\n  const removeAsset = useSellAsset((state) => state.removeSellAsset)\n  const isMobile = useIsMobile()\n  const [hovered, setHovered] = useState(false)\n  const handleHover = () => setHovered(!hovered)\n\n  const handleRemoveAsset: React.MouseEventHandler<HTMLElement> = (e) => {\n    e.preventDefault()\n    e.stopPropagation()\n    removeAsset(asset)\n  }\n\n  return (\n    <Row className={styles.bagRow} onMouseEnter={handleHover} onMouseLeave={handleHover}>\n      <Box position=\"relative\" display=\"flex\">\n        {isMobile && <RemoveAssetButton onClick={handleRemoveAsset} />}\n        <img src={asset.smallImageUrl} alt={asset.name} className={styles.bagRowImage} />\n      </Box>\n      <Column overflow=\"hidden\" width=\"full\" color=\"textPrimary\">\n        <Row overflow=\"hidden\" width=\"full\" justifyContent=\"space-between\" whiteSpace=\"nowrap\" gap=\"16\">\n          <Box className={styles.assetName}>{asset.name || `#${asset.tokenId}`}</Box>\n        </Row>\n        <Row overflow=\"hidden\" whiteSpace=\"nowrap\" gap=\"2\">\n          <Box className={styles.collectionName}>{asset.asset_contract.name}</Box>\n          {asset.collectionIsVerified && <VerifiedIcon className={styles.icon} />}\n        </Row>\n      </Column>\n      {hovered && !isMobile && (\n        <RemoveButton onClick={handleRemoveAsset} emphasis={ButtonEmphasis.medium} size={ButtonSize.medium}>\n          Remove\n        </RemoveButton>\n      )}\n    </Row>\n  )\n}\n\nexport default ProfileAssetRow\n","import { Column } from 'nft/components/Flex'\nimport { useSellAsset } from 'nft/hooks'\n\nimport ProfileAssetRow from './ProfileAssetRow'\n\nexport const ProfileBagContent = () => {\n  const sellAssets = useSellAsset((state) => state.sellAssets)\n  return (\n    <Column>\n      {sellAssets.length ? sellAssets.map((asset, index) => <ProfileAssetRow asset={asset} key={index} />) : null}\n    </Column>\n  )\n}\n","import { BigNumber } from '@ethersproject/bignumber'\nimport { sendAnalyticsEvent } from '@uniswap/analytics'\nimport { NFTEventName } from '@uniswap/analytics-events'\nimport { useWeb3React } from '@web3-react/core'\nimport { GqlRoutingVariant, useGqlRoutingFlag } from 'featureFlags/flags/gqlRouting'\nimport { useNftRouteLazyQuery } from 'graphql/data/__generated__/types-and-hooks'\nimport { useIsNftDetailsPage, useIsNftPage, useIsNftProfilePage } from 'hooks/useIsNftPage'\nimport { BagFooter } from 'nft/components/bag/BagFooter'\nimport ListingModal from 'nft/components/bag/profile/ListingModal'\nimport { Box } from 'nft/components/Box'\nimport { Portal } from 'nft/components/common/Portal'\nimport { Column } from 'nft/components/Flex'\nimport { Overlay } from 'nft/components/modals/Overlay'\nimport { buttonTextMedium, commonButtonStyles } from 'nft/css/common.css'\nimport {\n  useBag,\n  useIsMobile,\n  useProfilePageState,\n  useSellAsset,\n  useSendTransaction,\n  useTransactionResponse,\n} from 'nft/hooks'\nimport { useTokenInput } from 'nft/hooks/useTokenInput'\nimport { fetchRoute } from 'nft/queries'\nimport { BagItemStatus, BagStatus, ProfilePageStateType, RouteResponse, TxStateType } from 'nft/types'\nimport {\n  buildNftTradeInputFromBagItems,\n  buildSellObject,\n  formatAssetEventProperties,\n  recalculateBagUsingPooledAssets,\n  sortUpdatedAssets,\n} from 'nft/utils'\nimport { buildRouteResponse } from 'nft/utils/nftRoute'\nimport { combineBuyItemsWithTxRoute } from 'nft/utils/txRoute/combineItemsWithTxRoute'\nimport { useCallback, useEffect, useMemo, useRef, useState } from 'react'\nimport { useQueryClient } from 'react-query'\nimport styled from 'styled-components/macro'\nimport { Z_INDEX } from 'theme/zIndex'\nimport shallow from 'zustand/shallow'\n\nimport * as styles from './Bag.css'\nimport { BagContent } from './BagContent'\nimport { BagHeader } from './BagHeader'\nimport EmptyState from './EmptyContent'\nimport { ProfileBagContent } from './profile/ProfileBagContent'\n\nexport const BAG_WIDTH = 320\nexport const XXXL_BAG_WIDTH = 360\n\ninterface SeparatorProps {\n  top?: boolean\n  show?: boolean\n}\n\nconst BagContainer = styled.div<{ raiseZIndex: boolean; isProfilePage: boolean }>`\n  position: fixed;\n  display: flex;\n  flex-direction: column;\n  top: 88px;\n  right: 20px;\n  width: ${BAG_WIDTH}px;\n  height: calc(100vh - 108px);\n  background: ${({ theme }) => theme.backgroundSurface};\n  border: 1px solid ${({ theme }) => theme.backgroundOutline};\n  border-radius: 16px;\n  box-shadow: ${({ theme }) => theme.shallowShadow};\n  z-index: ${({ raiseZIndex, isProfilePage }) =>\n    raiseZIndex ? (isProfilePage ? Z_INDEX.modalOverTooltip : Z_INDEX.modalBackdrop - 1) : 3};\n\n  @media only screen and (max-width: ${({ theme }) => `${theme.breakpoint.sm}px`}) {\n    right: 0px;\n    top: 0px;\n    width: 100%;\n    height: 100%;\n    border-radius: 0px;\n    border: none;\n  }\n\n  @media only screen and (min-width: ${({ theme }) => `${theme.breakpoint.xxxl}px`}) {\n    width: ${XXXL_BAG_WIDTH}px;\n  }\n`\n\nconst DetailsPageBackground = styled.div`\n  position: fixed;\n  background: rgba(0, 0, 0, 0.7);\n  top: 0px;\n  width: 100%;\n  height: 100%;\n`\n\nconst ScrollingIndicator = ({ top, show }: SeparatorProps) => (\n  <Box\n    marginX=\"24\"\n    borderWidth=\"1px\"\n    borderStyle=\"solid\"\n    borderColor=\"transparent\"\n    borderTopColor={top ? 'transparent' : 'backgroundOutline'}\n    borderBottomColor={top ? 'backgroundOutline' : 'transparent'}\n    opacity={show ? '1' : '0'}\n    transition=\"250\"\n  />\n)\n\nconst Bag = () => {\n  const { account, provider } = useWeb3React()\n\n  const { resetSellAssets, sellAssets } = useSellAsset(\n    ({ reset, sellAssets }) => ({\n      resetSellAssets: reset,\n      sellAssets,\n    }),\n    shallow\n  )\n\n  const { profilePageState, setProfilePageState } = useProfilePageState(\n    ({ setProfilePageState, state }) => ({ profilePageState: state, setProfilePageState }),\n    shallow\n  )\n\n  const {\n    bagStatus,\n    setBagStatus,\n    didOpenUnavailableAssets,\n    setDidOpenUnavailableAssets,\n    bagIsLocked,\n    setLocked,\n    reset,\n    setItemsInBag,\n    bagExpanded,\n    toggleBag,\n    setTotalEthPrice,\n    setBagExpanded,\n  } = useBag((state) => ({ ...state, bagIsLocked: state.isLocked, uncheckedItemsInBag: state.itemsInBag }), shallow)\n  const { uncheckedItemsInBag } = useBag(({ itemsInBag }) => ({ uncheckedItemsInBag: itemsInBag }))\n\n  const isProfilePage = useIsNftProfilePage()\n  const isDetailsPage = useIsNftDetailsPage()\n  const isNFTPage = useIsNftPage()\n  const isMobile = useIsMobile()\n  const usingGqlRouting = useGqlRoutingFlag() === GqlRoutingVariant.Enabled\n\n  const sendTransaction = useSendTransaction((state) => state.sendTransaction)\n  const transactionState = useSendTransaction((state) => state.state)\n  const setTransactionState = useSendTransaction((state) => state.setState)\n  const transactionStateRef = useRef(transactionState)\n  const [setTransactionResponse] = useTransactionResponse((state) => [state.setTransactionResponse])\n  const tokenTradeInput = useTokenInput((state) => state.tokenTradeInput)\n\n  const queryClient = useQueryClient()\n\n  const itemsInBag = useMemo(() => recalculateBagUsingPooledAssets(uncheckedItemsInBag), [uncheckedItemsInBag])\n\n  const [isModalOpen, setModalIsOpen] = useState(false)\n  const [userCanScroll, setUserCanScroll] = useState(false)\n  const [scrollProgress, setScrollProgress] = useState(0)\n  const scrollRef = (node: HTMLDivElement) => {\n    if (node !== null) {\n      const canScroll = node.scrollHeight > node.clientHeight\n      canScroll !== userCanScroll && setUserCanScroll(canScroll)\n    }\n  }\n\n  const { totalEthPrice } = useMemo(() => {\n    const totalEthPrice = itemsInBag.reduce(\n      (total, item) =>\n        item.status !== BagItemStatus.UNAVAILABLE\n          ? total.add(\n              BigNumber.from(\n                item.asset.updatedPriceInfo ? item.asset.updatedPriceInfo.ETHPrice : item.asset.priceInfo.ETHPrice\n              )\n            )\n          : total,\n      BigNumber.from(0)\n    )\n\n    return { totalEthPrice }\n  }, [itemsInBag])\n\n  const purchaseAssets = async (routingData: RouteResponse, purchasingWithErc20: boolean) => {\n    if (!provider || !routingData) return\n    const purchaseResponse = await sendTransaction(\n      provider?.getSigner(),\n      itemsInBag.filter((item) => item.status !== BagItemStatus.UNAVAILABLE).map((item) => item.asset),\n      routingData,\n      purchasingWithErc20\n    )\n    if (\n      purchaseResponse &&\n      (transactionStateRef.current === TxStateType.Success || transactionStateRef.current === TxStateType.Failed)\n    ) {\n      setLocked(false)\n      setModalIsOpen(false)\n      setTransactionResponse(purchaseResponse)\n      setBagExpanded({ bagExpanded: false })\n      reset()\n    }\n  }\n\n  const handleCloseBag = useCallback(() => {\n    setBagExpanded({ bagExpanded: false, manualClose: true })\n  }, [setBagExpanded])\n\n  const [fetchGqlRoute] = useNftRouteLazyQuery()\n\n  const fetchAssets = async () => {\n    const itemsToBuy = itemsInBag.filter((item) => item.status !== BagItemStatus.UNAVAILABLE).map((item) => item.asset)\n    const ethSellObject = buildSellObject(\n      itemsToBuy\n        .reduce((ethTotal, asset) => ethTotal.add(BigNumber.from(asset.priceInfo.ETHPrice)), BigNumber.from(0))\n        .toString()\n    )\n\n    didOpenUnavailableAssets && setDidOpenUnavailableAssets(false)\n    !bagIsLocked && setLocked(true)\n    setBagStatus(BagStatus.FETCHING_ROUTE)\n    try {\n      if (usingGqlRouting) {\n        fetchGqlRoute({\n          variables: {\n            senderAddress: usingGqlRouting && account ? account : '',\n            nftTrades: usingGqlRouting ? buildNftTradeInputFromBagItems(itemsInBag) : [],\n            tokenTrades: tokenTradeInput ? tokenTradeInput : undefined,\n          },\n          onCompleted: (data) => {\n            if (!data.nftRoute || !data.nftRoute.route) {\n              setBagStatus(BagStatus.ADDING_TO_BAG)\n              setLocked(false)\n              return\n            }\n\n            const purchasingWithErc20 = !!tokenTradeInput\n            const { route, routeResponse } = buildRouteResponse(data.nftRoute, purchasingWithErc20)\n\n            const { hasPriceAdjustment, updatedAssets } = combineBuyItemsWithTxRoute(itemsToBuy, route)\n            const shouldRefetchCalldata = hasPriceAdjustment && purchasingWithErc20\n\n            const fetchedPriceChangedAssets = updatedAssets\n              .filter((asset) => asset.updatedPriceInfo)\n              .sort(sortUpdatedAssets)\n            const fetchedUnavailableAssets = updatedAssets.filter((asset) => asset.isUnavailable)\n            const fetchedUnchangedAssets = updatedAssets.filter(\n              (asset) => !asset.updatedPriceInfo && !asset.isUnavailable\n            )\n            const hasReviewedAssets = fetchedUnchangedAssets.length > 0\n            const hasAssetsInReview = fetchedPriceChangedAssets.length > 0\n            const hasUnavailableAssets = fetchedUnavailableAssets.length > 0\n            const hasAssets = hasReviewedAssets || hasAssetsInReview || hasUnavailableAssets\n            const shouldReview = hasAssetsInReview || hasUnavailableAssets\n\n            setItemsInBag([\n              ...fetchedUnavailableAssets.map((unavailableAsset) => ({\n                asset: unavailableAsset,\n                status: BagItemStatus.UNAVAILABLE,\n              })),\n              ...fetchedPriceChangedAssets.map((changedAsset) => ({\n                asset: changedAsset,\n                status: BagItemStatus.REVIEWING_PRICE_CHANGE,\n              })),\n              ...fetchedUnchangedAssets.map((unchangedAsset) => ({\n                asset: unchangedAsset,\n                status: BagItemStatus.REVIEWED,\n              })),\n            ])\n\n            let shouldLock = false\n\n            if (hasAssets) {\n              if (!shouldReview) {\n                if (shouldRefetchCalldata) {\n                  setBagStatus(BagStatus.CONFIRM_QUOTE)\n                } else {\n                  purchaseAssets(routeResponse, purchasingWithErc20)\n                  setBagStatus(BagStatus.CONFIRMING_IN_WALLET)\n                  shouldLock = true\n                }\n              } else if (!hasAssetsInReview) setBagStatus(BagStatus.CONFIRM_REVIEW)\n              else {\n                setBagStatus(BagStatus.IN_REVIEW)\n              }\n            } else {\n              setBagStatus(BagStatus.ADDING_TO_BAG)\n            }\n\n            setLocked(shouldLock)\n          },\n        })\n      } else {\n        const routeData = await queryClient.fetchQuery(['assetsRoute', ethSellObject, itemsToBuy, account], () =>\n          fetchRoute({\n            toSell: [ethSellObject],\n            toBuy: itemsToBuy,\n            senderAddress: account ?? '',\n          })\n        )\n\n        const { updatedAssets } = combineBuyItemsWithTxRoute(itemsToBuy, routeData.route)\n\n        const fetchedPriceChangedAssets = updatedAssets\n          .filter((asset) => asset.updatedPriceInfo)\n          .sort(sortUpdatedAssets)\n        const fetchedUnavailableAssets = updatedAssets.filter((asset) => asset.isUnavailable)\n        const fetchedUnchangedAssets = updatedAssets.filter((asset) => !asset.updatedPriceInfo && !asset.isUnavailable)\n        const hasReviewedAssets = fetchedUnchangedAssets.length > 0\n        const hasAssetsInReview = fetchedPriceChangedAssets.length > 0\n        const hasUnavailableAssets = fetchedUnavailableAssets.length > 0\n        const hasAssets = hasReviewedAssets || hasAssetsInReview || hasUnavailableAssets\n        const shouldReview = hasAssetsInReview || hasUnavailableAssets\n\n        setItemsInBag([\n          ...fetchedUnavailableAssets.map((unavailableAsset) => ({\n            asset: unavailableAsset,\n            status: BagItemStatus.UNAVAILABLE,\n          })),\n          ...fetchedPriceChangedAssets.map((changedAsset) => ({\n            asset: changedAsset,\n            status: BagItemStatus.REVIEWING_PRICE_CHANGE,\n          })),\n          ...fetchedUnchangedAssets.map((unchangedAsset) => ({\n            asset: unchangedAsset,\n            status: BagItemStatus.REVIEWED,\n          })),\n        ])\n        setLocked(false)\n\n        if (hasAssets) {\n          if (!shouldReview) {\n            purchaseAssets(routeData, false)\n            setBagStatus(BagStatus.CONFIRMING_IN_WALLET)\n          } else if (!hasAssetsInReview) setBagStatus(BagStatus.CONFIRM_REVIEW)\n          else {\n            setBagStatus(BagStatus.IN_REVIEW)\n          }\n        } else {\n          setBagStatus(BagStatus.ADDING_TO_BAG)\n        }\n      }\n    } catch (error) {\n      setBagStatus(BagStatus.ADDING_TO_BAG)\n    }\n  }\n\n  useEffect(() => {\n    useSendTransaction.subscribe((state) => (transactionStateRef.current = state.state))\n  }, [])\n\n  useEffect(() => {\n    if (bagIsLocked && !isModalOpen) setModalIsOpen(true)\n  }, [bagIsLocked, isModalOpen])\n\n  useEffect(() => {\n    if (transactionStateRef.current === TxStateType.Confirming) setBagStatus(BagStatus.PROCESSING_TRANSACTION)\n    if (transactionStateRef.current === TxStateType.Denied || transactionStateRef.current === TxStateType.Invalid) {\n      if (transactionStateRef.current === TxStateType.Invalid) setBagStatus(BagStatus.WARNING)\n      else setBagStatus(BagStatus.CONFIRM_REVIEW)\n      setTransactionState(TxStateType.New)\n\n      setLocked(false)\n      setModalIsOpen(false)\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [transactionStateRef.current])\n\n  useEffect(() => {\n    setTotalEthPrice(totalEthPrice)\n  }, [totalEthPrice, setTotalEthPrice])\n\n  const hasAssetsToShow = itemsInBag.length > 0\n\n  const scrollHandler = (event: React.UIEvent<HTMLDivElement>) => {\n    const scrollTop = event.currentTarget.scrollTop\n    const containerHeight = event.currentTarget.clientHeight\n    const scrollHeight = event.currentTarget.scrollHeight\n\n    setScrollProgress(scrollTop ? ((scrollTop + containerHeight) / scrollHeight) * 100 : 0)\n  }\n\n  const isBuyingAssets = itemsInBag.length > 0\n  const isSellingAssets = sellAssets.length > 0\n\n  const shouldRenderEmptyState = Boolean(\n    (!isProfilePage && !isBuyingAssets && bagStatus === BagStatus.ADDING_TO_BAG) || (isProfilePage && !isSellingAssets)\n  )\n\n  const eventProperties = useMemo(\n    () => ({\n      ...formatAssetEventProperties(itemsInBag.map((item) => item.asset)),\n    }),\n    [itemsInBag]\n  )\n\n  if (!bagExpanded || !isNFTPage) {\n    return null\n  }\n\n  return (\n    <Portal>\n      <BagContainer data-testid=\"nft-bag\" raiseZIndex={isMobile || isModalOpen} isProfilePage={isProfilePage}>\n        {!(isProfilePage && profilePageState === ProfilePageStateType.LISTING) ? (\n          <>\n            <BagHeader\n              numberOfAssets={isProfilePage ? sellAssets.length : itemsInBag.length}\n              closeBag={handleCloseBag}\n              resetFlow={isProfilePage ? resetSellAssets : reset}\n              isProfilePage={isProfilePage}\n            />\n            {shouldRenderEmptyState && <EmptyState />}\n            <ScrollingIndicator top show={userCanScroll && scrollProgress > 0} />\n            <Column ref={scrollRef} className={styles.assetsContainer} onScroll={scrollHandler} gap=\"12\">\n              {isProfilePage ? <ProfileBagContent /> : <BagContent />}\n            </Column>\n            {hasAssetsToShow && !isProfilePage && (\n              <BagFooter totalEthPrice={totalEthPrice} fetchAssets={fetchAssets} eventProperties={eventProperties} />\n            )}\n            {isSellingAssets && isProfilePage && (\n              <Box\n                marginTop=\"32\"\n                marginX=\"28\"\n                marginBottom=\"16\"\n                paddingY=\"10\"\n                className={`${buttonTextMedium} ${commonButtonStyles}`}\n                backgroundColor=\"accentAction\"\n                color=\"white\"\n                textAlign=\"center\"\n                onClick={() => {\n                  toggleBag()\n                  setProfilePageState(ProfilePageStateType.LISTING)\n                  sendAnalyticsEvent(NFTEventName.NFT_PROFILE_PAGE_START_SELL, {\n                    list_quantity: sellAssets.length,\n                    collection_addresses: sellAssets.map((asset) => asset.asset_contract.address),\n                    token_ids: sellAssets.map((asset) => asset.tokenId),\n                  })\n                }}\n              >\n                Continue\n              </Box>\n            )}\n          </>\n        ) : (\n          <ListingModal />\n        )}\n      </BagContainer>\n\n      {isDetailsPage ? (\n        <DetailsPageBackground onClick={toggleBag} />\n      ) : (\n        isModalOpen && <Overlay onClick={() => (!bagIsLocked ? setModalIsOpen(false) : undefined)} />\n      )}\n    </Portal>\n  )\n}\n\nexport default Bag\n","import { BaseVariant, FeatureFlag, useBaseFlag } from '../index'\n\nexport function useGqlRoutingFlag(): BaseVariant {\n  return useBaseFlag(FeatureFlag.gqlRouting, BaseVariant.Enabled)\n}\n\nexport { BaseVariant as GqlRoutingVariant }\n","import \"src/nft/css/sprinkles.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/css/sprinkles.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nimport \"src/nft/components/bag/Bag.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/nft/components/bag/Bag.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xamN6NTByMSB7CiAgc2Nyb2xsYmFyLXdpZHRoOiBub25lOwp9Ci5fMWpjejUwcjE6Oi13ZWJraXQtc2Nyb2xsYmFyIHsKICBkaXNwbGF5OiBub25lOwp9CkBtZWRpYSAobWluLXdpZHRoOiA3NjhweCkgewogIC5fMWpjejUwcjMgewogICAgd2lkdGg6IDM2MHB4OwogICAgaGVpZ2h0OiBjYWxjKDEwMHZoIC0gNzJweCk7CiAgfQp9\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted/dist/vanilla-extract-webpack-plugin-extracted.cjs.js\"\nexport var assetsContainer = '_1jcz50r1 rgw6ez2dk rgw6ez2j2 rgw6ez1y8 rgw6ez7ny';\nexport var bagContainer = '_1jcz50r3 rgw6ez47w rgw6ez3e8 rgw6ez3i3 rgw6ez16w rgw6ez1dq rgw6ez38q rgw6ez4oq rgw6ez7b2 rgw6ez50k rgw6ez7ka rgw6ez4dq';"],"sourceRoot":""}